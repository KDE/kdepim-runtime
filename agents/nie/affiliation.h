/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _AFFILIATION_H_
#define _AFFILIATION_H_

namespace Nepomuk {
        class PersonContact;
        class OrganizationContact;
}

#include "role.h"
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * Aggregates three properties defined in RFC2426. Originally 
 * all three were attached directly to a person. One person could 
 * have only one title and one role within one organization. This 
 * class is intended to lift this limitation. 
 */
    class NEPOMUK_EXPORT Affiliation : public Role
    {
    public:
        /**
         * Create a new empty and invalid Affiliation instance
         */
        Affiliation();
        /**
         * Default copy constructor
         */
        Affiliation( const Affiliation& );
        Affiliation( const Resource& );
        /**
         * Create a new Affiliation instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Affiliation( const QString& uriOrIdentifier );
        /**
         * Create a new Affiliation instance representing the resource
         * referenced by \a uri.
         */
        Affiliation( const QUrl& uri );
        ~Affiliation();

        Affiliation& operator=( const Affiliation& );

            /**
             * Get property 'org'. Name of an organization or a unit within 
             * an organization the object represented by a Contact is associated 
             * with. An equivalent of the 'ORG' property defined in RFC 2426 
             * Sec. 3.5.5 
             */
            QList<OrganizationContact> orgs() const;

            /**
             * Set property 'org'. Name of an organization or a unit within 
             * an organization the object represented by a Contact is associated 
             * with. An equivalent of the 'ORG' property defined in RFC 2426 
             * Sec. 3.5.5 
             */
            void setOrgs( const QList<OrganizationContact>& value );

            /**
             * Add a value to property 'org'. Name of an organization or a unit 
             * within an organization the object represented by a Contact 
             * is associated with. An equivalent of the 'ORG' property defined 
             * in RFC 2426 Sec. 3.5.5 
             */
            void addOrg( const OrganizationContact& value );

            /**
             * \return The URI of the property 'org'. 
             */
            static QUrl orgUri();

            /**
             * Get property 'department'. Department. The organizational 
             * unit within the organization. 
             */
            QStringList departments() const;

            /**
             * Set property 'department'. Department. The organizational 
             * unit within the organization. 
             */
            void setDepartments( const QStringList& value );

            /**
             * Add a value to property 'department'. Department. The organizational 
             * unit within the organization. 
             */
            void addDepartment( const QString& value );

            /**
             * \return The URI of the property 'department'. 
             */
            static QUrl departmentUri();

            /**
             * Get property 'title'. The official title the object represented 
             * by this contact in an organization. E.g. 'CEO', 'Director, 
             * Research and Development', 'Junior Software Developer/Analyst' 
             * etc. An equivalent of the 'TITLE' property defined in RFC 2426 
             * Sec. 3.5.1 
             */
            QStringList titles() const;

            /**
             * Set property 'title'. The official title the object represented 
             * by this contact in an organization. E.g. 'CEO', 'Director, 
             * Research and Development', 'Junior Software Developer/Analyst' 
             * etc. An equivalent of the 'TITLE' property defined in RFC 2426 
             * Sec. 3.5.1 
             */
            void setTitles( const QStringList& value );

            /**
             * Add a value to property 'title'. The official title the object 
             * represented by this contact in an organization. E.g. 'CEO', 
             * 'Director, Research and Development', 'Junior Software Developer/Analyst' 
             * etc. An equivalent of the 'TITLE' property defined in RFC 2426 
             * Sec. 3.5.1 
             */
            void addTitle( const QString& value );

            /**
             * \return The URI of the property 'title'. 
             */
            static QUrl titleUri();

            /**
             * Get property 'role'. Role an object represented by this contact 
             * represents in the organization. This might include 'Programmer', 
             * 'Manager', 'Sales Representative'. Be careful to avoid confusion 
             * with the title property. An equivalent of the 'ROLE' property 
             * as defined in RFC 2426. Sec. 3.5.2. Note the difference between 
             * nco:Role class and nco:role property. 
             */
            QStringList roles() const;

            /**
             * Set property 'role'. Role an object represented by this contact 
             * represents in the organization. This might include 'Programmer', 
             * 'Manager', 'Sales Representative'. Be careful to avoid confusion 
             * with the title property. An equivalent of the 'ROLE' property 
             * as defined in RFC 2426. Sec. 3.5.2. Note the difference between 
             * nco:Role class and nco:role property. 
             */
            void setRoles( const QStringList& value );

            /**
             * Add a value to property 'role'. Role an object represented by 
             * this contact represents in the organization. This might include 
             * 'Programmer', 'Manager', 'Sales Representative'. Be careful 
             * to avoid confusion with the title property. An equivalent of 
             * the 'ROLE' property as defined in RFC 2426. Sec. 3.5.2. Note 
             * the difference between nco:Role class and nco:role property. 
             */
            void addRole( const QString& value );

            /**
             * \return The URI of the property 'role'. 
             */
            static QUrl roleUri();

            /**
             * Get all resources that have this resource set as property 'Affiliation'. 
             * Links a PersonContact with an Affiliation. \sa ResourceManager::allResourcesWithProperty 
             */
            QList<PersonContact> affiliationOf() const;

            /**
             * Retrieve a list of all available Affiliation resources. This 
             * list consists of all resource of type Affiliation that are stored 
             * in the local Nepomuk meta data storage and any changes made locally. 
             * Be aware that in some cases this list can get very big. Then it 
             * might be better to use libKNep directly. 
             */
            static QList<Affiliation> allAffiliations();


        /**
         * \return The URI of the resource type that is used in Affiliation instances.
         */
        static QString resourceTypeUri();

    protected:
       Affiliation( const QString& uri, const QUrl& type );
       Affiliation( const QUrl& uri, const QUrl& type );
   };
}

#endif

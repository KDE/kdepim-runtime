/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _IMAGE_H_
#define _IMAGE_H_

namespace Nepomuk {
}

#include "visual.h"
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * A file containing an image. 
 */
    class NEPOMUK_EXPORT Image : public Visual
    {
    public:
        /**
         * Create a new empty and invalid Image instance
         */
        Image();
        /**
         * Default copy constructor
         */
        Image( const Image& );
        Image( const Resource& );
        /**
         * Create a new Image instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Image( const QString& uriOrIdentifier );
        /**
         * Create a new Image instance representing the resource
         * referenced by \a uri.
         */
        Image( const QUrl& uri );
        ~Image();

        Image& operator=( const Image& );

            /**
             * Get property 'verticalResolution'. Vertical resolution 
             * of an Image (if printed). Expressed in DPI 
             */
            QList<qint64> verticalResolutions() const;

            /**
             * Set property 'verticalResolution'. Vertical resolution 
             * of an Image (if printed). Expressed in DPI 
             */
            void setVerticalResolutions( const QList<qint64>& value );

            /**
             * Add a value to property 'verticalResolution'. Vertical resolution 
             * of an Image (if printed). Expressed in DPI 
             */
            void addVerticalResolution( const qint64& value );

            /**
             * \return The URI of the property 'verticalResolution'. 
             */
            static QUrl verticalResolutionUri();

            /**
             * Get property 'horizontalResolution'. Horizontal resolution 
             * of an image (if printed). Expressed in DPI. 
             */
            QList<qint64> horizontalResolutions() const;

            /**
             * Set property 'horizontalResolution'. Horizontal resolution 
             * of an image (if printed). Expressed in DPI. 
             */
            void setHorizontalResolutions( const QList<qint64>& value );

            /**
             * Add a value to property 'horizontalResolution'. Horizontal 
             * resolution of an image (if printed). Expressed in DPI. 
             */
            void addHorizontalResolution( const qint64& value );

            /**
             * \return The URI of the property 'horizontalResolution'. 
             */
            static QUrl horizontalResolutionUri();

            /**
             * Retrieve a list of all available Image resources. This list 
             * consists of all resource of type Image that are stored in the 
             * local Nepomuk meta data storage and any changes made locally. 
             * Be aware that in some cases this list can get very big. Then it 
             * might be better to use libKNep directly. 
             */
            static QList<Image> allImages();


        /**
         * \return The URI of the resource type that is used in Image instances.
         */
        static QString resourceTypeUri();

    protected:
       Image( const QString& uri, const QUrl& type );
       Image( const QUrl& uri, const QUrl& type );
   };
}

#endif

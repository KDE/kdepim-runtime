/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk/tools.h>
#include <nepomuk/variant.h>
#include <nepomuk/resourcemanager.h>
#include "email.h"

#include "contact.h"
Nepomuk::Email::Email()
  : Message( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Email") )
{
}


Nepomuk::Email::Email( const Email& res )
  : Message( res )
{
}


Nepomuk::Email::Email( const Nepomuk::Resource& res )
  : Message( res )
{
}


Nepomuk::Email::Email( const QString& uri )
  : Message( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Email") )
{
}

Nepomuk::Email::Email( const QUrl& uri )
  : Message( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Email") )
{
}

Nepomuk::Email::Email( const QString& uri, const QUrl& type )
  : Message( uri, type )
{
}

Nepomuk::Email::Email( const QUrl& uri, const QUrl& type )
  : Message( uri, type )
{
}

Nepomuk::Email::~Email()
{
}


Nepomuk::Email& Nepomuk::Email::operator=( const Email& res )
{
    Resource::operator=( res );
    return *this;
}


QString Nepomuk::Email::resourceTypeUri()
{
    return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Email";
}

QList<Nepomuk::Contact> Nepomuk::Email::tos() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Contact>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#to") ).toResourceList() );
}

void Nepomuk::Email::setTos( const QList<Nepomuk::Contact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Contact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#to"), Variant( l ) );
}

void Nepomuk::Email::addTo( const Nepomuk::Contact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#to") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#to"), v );
}

QUrl Nepomuk::Email::toUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#to");
}

QList<Nepomuk::Contact> Nepomuk::Email::bccs() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Contact>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#bcc") ).toResourceList() );
}

void Nepomuk::Email::setBccs( const QList<Nepomuk::Contact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Contact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#bcc"), Variant( l ) );
}

void Nepomuk::Email::addBcc( const Nepomuk::Contact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#bcc") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#bcc"), v );
}

QUrl Nepomuk::Email::bccUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#bcc");
}

QList<Nepomuk::Contact> Nepomuk::Email::ccs() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Contact>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#cc") ).toResourceList() );
}

void Nepomuk::Email::setCcs( const QList<Nepomuk::Contact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Contact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#cc"), Variant( l ) );
}

void Nepomuk::Email::addCc( const Nepomuk::Contact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#cc") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#cc"), v );
}

QUrl Nepomuk::Email::ccUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#cc");
}

QStringList Nepomuk::Email::contentMimeTypes() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#contentMimeType") ).toStringList());
}

void Nepomuk::Email::setContentMimeTypes( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#contentMimeType"), Variant( value ) );
}

void Nepomuk::Email::addContentMimeType( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#contentMimeType") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#contentMimeType"), v );
}

QUrl Nepomuk::Email::contentMimeTypeUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#contentMimeType");
}

QList<Nepomuk::Email> Nepomuk::Email::allEmails()
{
    return Nepomuk::convertResourceList<Email>( ResourceManager::instance()->allResourcesOfType( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Email") ) );
}



/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _CELLPHONENUMBER_H_
#define _CELLPHONENUMBER_H_

namespace Nepomuk {
        class MessagingNumber;
}

#include "voicephonenumber.h"
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * A cellular phone number. Inspired by the (TYPE=cell) parameter 
 * of the TEL property as defined in RFC 2426 sec 3.3.1. Usually 
 * a cellular phone can accept voice calls as well as textual messages 
 * (SMS), therefore this class has two superclasses. 
 */
    class NEPOMUK_EXPORT CellPhoneNumber : public VoicePhoneNumber
    {
    public:
        /**
         * Create a new empty and invalid CellPhoneNumber instance
         */
        CellPhoneNumber();
        /**
         * Default copy constructor
         */
        CellPhoneNumber( const CellPhoneNumber& );
        CellPhoneNumber( const Resource& );
        /**
         * Create a new CellPhoneNumber instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        CellPhoneNumber( const QString& uriOrIdentifier );
        /**
         * Create a new CellPhoneNumber instance representing the resource
         * referenced by \a uri.
         */
        CellPhoneNumber( const QUrl& uri );
        ~CellPhoneNumber();

        CellPhoneNumber& operator=( const CellPhoneNumber& );

            /**
             * Nepomuk does not support multiple inheritance. Thus, to access 
             * properties from all parent classes helper methods like this 
             * are introduced. The object returned represents the exact same 
             * resource. 
             */
            MessagingNumber toMessagingNumber() const;

            /**
             * Retrieve a list of all available CellPhoneNumber resources. 
             * This list consists of all resource of type CellPhoneNumber 
             * that are stored in the local Nepomuk meta data storage and any 
             * changes made locally. Be aware that in some cases this list can 
             * get very big. Then it might be better to use libKNep directly. 
             */
            static QList<CellPhoneNumber> allCellPhoneNumbers();


        /**
         * \return The URI of the resource type that is used in CellPhoneNumber instances.
         */
        static QString resourceTypeUri();

    protected:
       CellPhoneNumber( const QString& uri, const QUrl& type );
       CellPhoneNumber( const QUrl& uri, const QUrl& type );
   };
}

#endif

/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _AUDIO_H_
#define _AUDIO_H_

namespace Nepomuk {
}

#include "media.h"
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * A file containing audio content 
 */
    class NEPOMUK_EXPORT Audio : public Media
    {
    public:
        /**
         * Create a new empty and invalid Audio instance
         */
        Audio();
        /**
         * Default copy constructor
         */
        Audio( const Audio& );
        Audio( const Resource& );
        /**
         * Create a new Audio instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Audio( const QString& uriOrIdentifier );
        /**
         * Create a new Audio instance representing the resource
         * referenced by \a uri.
         */
        Audio( const QUrl& uri );
        ~Audio();

        Audio& operator=( const Audio& );

            /**
             * Get property 'channels'. Number of channels. This property 
             * is to be used directly if no detailed information is necessary. 
             * Otherwise use more detailed subproperties. 
             */
            QList<qint64> channelses() const;

            /**
             * Set property 'channels'. Number of channels. This property 
             * is to be used directly if no detailed information is necessary. 
             * Otherwise use more detailed subproperties. 
             */
            void setChannelses( const QList<qint64>& value );

            /**
             * Add a value to property 'channels'. Number of channels. This 
             * property is to be used directly if no detailed information is 
             * necessary. Otherwise use more detailed subproperties. 
             */
            void addChannels( const qint64& value );

            /**
             * \return The URI of the property 'channels'. 
             */
            static QUrl channelsUri();

            /**
             * Get property 'sampleCount'. The amount of samples in an audio 
             * clip. 
             */
            QList<qint64> sampleCounts() const;

            /**
             * Set property 'sampleCount'. The amount of samples in an audio 
             * clip. 
             */
            void setSampleCounts( const QList<qint64>& value );

            /**
             * Add a value to property 'sampleCount'. The amount of samples 
             * in an audio clip. 
             */
            void addSampleCount( const qint64& value );

            /**
             * \return The URI of the property 'sampleCount'. 
             */
            static QUrl sampleCountUri();

            /**
             * Get property 'bitsPerSample'. Amount of bits in each audio 
             * sample. 
             */
            QList<qint64> bitsPerSamples() const;

            /**
             * Set property 'bitsPerSample'. Amount of bits in each audio 
             * sample. 
             */
            void setBitsPerSamples( const QList<qint64>& value );

            /**
             * Add a value to property 'bitsPerSample'. Amount of bits in each 
             * audio sample. 
             */
            void addBitsPerSample( const qint64& value );

            /**
             * \return The URI of the property 'bitsPerSample'. 
             */
            static QUrl bitsPerSampleUri();

            /**
             * Get property 'sampleRate'. The amount of audio samples per 
             * second. 
             */
            QList<double> sampleRates() const;

            /**
             * Set property 'sampleRate'. The amount of audio samples per 
             * second. 
             */
            void setSampleRates( const QList<double>& value );

            /**
             * Add a value to property 'sampleRate'. The amount of audio samples 
             * per second. 
             */
            void addSampleRate( const double& value );

            /**
             * \return The URI of the property 'sampleRate'. 
             */
            static QUrl sampleRateUri();

            /**
             * Retrieve a list of all available Audio resources. This list 
             * consists of all resource of type Audio that are stored in the 
             * local Nepomuk meta data storage and any changes made locally. 
             * Be aware that in some cases this list can get very big. Then it 
             * might be better to use libKNep directly. 
             */
            static QList<Audio> allAudios();


        /**
         * \return The URI of the resource type that is used in Audio instances.
         */
        static QString resourceTypeUri();

    protected:
       Audio( const QString& uri, const QUrl& type );
       Audio( const QUrl& uri, const QUrl& type );
   };
}

#endif

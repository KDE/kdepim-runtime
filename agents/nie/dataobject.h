/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _DATAOBJECT_H_
#define _DATAOBJECT_H_

namespace Nepomuk {
        class Media;
        class InformationElement;
        class DataSource;
        class DataContainer;
        class Contact;
        class Resource;
        class OrganizationContact;
}

#include <nepomuk/resource.h>
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * A unit of data that is created, annotated and processed on the 
 * user desktop. It represents a native structure the user works 
 * with. The usage of the term 'native' is important. It means that 
 * a DataObject can be directly mapped to a data structure maintained 
 * by a native application. This may be a file, a set of files or a 
 * part of a file. The granularity depends on the user. This class 
 * is not intended to be instantiated by itself. Use more specific 
 * subclasses. 
 */
    class NEPOMUK_EXPORT DataObject : public Resource
    {
    public:
        /**
         * Create a new empty and invalid DataObject instance
         */
        DataObject();
        /**
         * Default copy constructor
         */
        DataObject( const DataObject& );
        DataObject( const Resource& );
        /**
         * Create a new DataObject instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        DataObject( const QString& uriOrIdentifier );
        /**
         * Create a new DataObject instance representing the resource
         * referenced by \a uri.
         */
        DataObject( const QUrl& uri );
        ~DataObject();

        DataObject& operator=( const DataObject& );

            /**
             * Get property 'created'. Date of creation of the DataObject. 
             * Note that this date refers to the creation of the DataObject 
             * itself (i.e. the physical representation). Compare with nie:contentCreated. 
             */
            QList<QDateTime> createds() const;

            /**
             * Set property 'created'. Date of creation of the DataObject. 
             * Note that this date refers to the creation of the DataObject 
             * itself (i.e. the physical representation). Compare with nie:contentCreated. 
             */
            void setCreateds( const QList<QDateTime>& value );

            /**
             * Add a value to property 'created'. Date of creation of the DataObject. 
             * Note that this date refers to the creation of the DataObject 
             * itself (i.e. the physical representation). Compare with nie:contentCreated. 
             */
            void addCreated( const QDateTime& value );

            /**
             * \return The URI of the property 'created'. 
             */
            static QUrl createdUri();

            /**
             * Get property 'interpretedAs'. Links the DataObject with the 
             * InformationElement it is interpreted as. 
             */
            QList<InformationElement> interpretedAses() const;

            /**
             * Set property 'interpretedAs'. Links the DataObject with the 
             * InformationElement it is interpreted as. 
             */
            void setInterpretedAses( const QList<InformationElement>& value );

            /**
             * Add a value to property 'interpretedAs'. Links the DataObject 
             * with the InformationElement it is interpreted as. 
             */
            void addInterpretedAs( const InformationElement& value );

            /**
             * \return The URI of the property 'interpretedAs'. 
             */
            static QUrl interpretedAsUri();

            /**
             * Get property 'isPartOf'. Generic property used to express 
             * containment relationships between DataObjects. NIE extensions 
             * are encouraged to provide more specific subproperties of this 
             * one. It is advisable for actual instances of DataObjects to 
             * use those specific subproperties. Note to the developers: 
             * Please be aware of the distinction between containment relation 
             * and provenance. The isPartOf relation models physical containment, 
             * a nie:DataObject (e.g. an nfo:Attachment) is a 'physical' 
             * part of an nie:InformationElement (a nmo:Message). Also, 
             * please note the difference between physical containment (isPartOf) 
             * and logical containment (isLogicalPartOf) the former has 
             * more strict meaning. They may occur independently of each other. 
             */
            QList<InformationElement> isPartOfs() const;

            /**
             * Set property 'isPartOf'. Generic property used to express 
             * containment relationships between DataObjects. NIE extensions 
             * are encouraged to provide more specific subproperties of this 
             * one. It is advisable for actual instances of DataObjects to 
             * use those specific subproperties. Note to the developers: 
             * Please be aware of the distinction between containment relation 
             * and provenance. The isPartOf relation models physical containment, 
             * a nie:DataObject (e.g. an nfo:Attachment) is a 'physical' 
             * part of an nie:InformationElement (a nmo:Message). Also, 
             * please note the difference between physical containment (isPartOf) 
             * and logical containment (isLogicalPartOf) the former has 
             * more strict meaning. They may occur independently of each other. 
             */
            void setIsPartOfs( const QList<InformationElement>& value );

            /**
             * Add a value to property 'isPartOf'. Generic property used to 
             * express containment relationships between DataObjects. 
             * NIE extensions are encouraged to provide more specific subproperties 
             * of this one. It is advisable for actual instances of DataObjects 
             * to use those specific subproperties. Note to the developers: 
             * Please be aware of the distinction between containment relation 
             * and provenance. The isPartOf relation models physical containment, 
             * a nie:DataObject (e.g. an nfo:Attachment) is a 'physical' 
             * part of an nie:InformationElement (a nmo:Message). Also, 
             * please note the difference between physical containment (isPartOf) 
             * and logical containment (isLogicalPartOf) the former has 
             * more strict meaning. They may occur independently of each other. 
             */
            void addIsPartOf( const InformationElement& value );

            /**
             * \return The URI of the property 'isPartOf'. 
             */
            static QUrl isPartOfUri();

            /**
             * Get property 'lastRefreshed'. Date when information about 
             * this data object was retrieved (for the first time) or last refreshed 
             * from the data source. This property is important for metadata 
             * extraction applications that don't receive any notifications 
             * of changes in the data source and have to poll it regularly. This 
             * may lead to information becoming out of date. In these cases 
             * this property may be used to determine the age of data, which 
             * is an important element of it's dependability. 
             */
            QDateTime lastRefreshed() const;

            /**
             * Set property 'lastRefreshed'. Date when information about 
             * this data object was retrieved (for the first time) or last refreshed 
             * from the data source. This property is important for metadata 
             * extraction applications that don't receive any notifications 
             * of changes in the data source and have to poll it regularly. This 
             * may lead to information becoming out of date. In these cases 
             * this property may be used to determine the age of data, which 
             * is an important element of it's dependability. 
             */
            void setLastRefreshed( const QDateTime& value );

            /**
             * \return The URI of the property 'lastRefreshed'. 
             */
            static QUrl lastRefreshedUri();

            /**
             * Get property 'dataSource'. Marks the provenance of a DataObject, 
             * what source does a data object come from. 
             */
            QList<DataSource> dataSources() const;

            /**
             * Set property 'dataSource'. Marks the provenance of a DataObject, 
             * what source does a data object come from. 
             */
            void setDataSources( const QList<DataSource>& value );

            /**
             * Add a value to property 'dataSource'. Marks the provenance 
             * of a DataObject, what source does a data object come from. 
             */
            void addDataSource( const DataSource& value );

            /**
             * \return The URI of the property 'dataSource'. 
             */
            static QUrl dataSourceUri();

            /**
             * Get property 'byteSize'. The overall size of the data object 
             * in bytes. That means the WHOLE data object and ONLY the data object, 
             * not of the content that is of interest to the user. For cases where 
             * the content size is different (e.g. in compressed files the 
             * content is larger, in messages the content excludes headings 
             * and is smaller) use more specific properties, not necessarily 
             * subproperties of this one. 
             */
            qint64 byteSize() const;

            /**
             * Set property 'byteSize'. The overall size of the data object 
             * in bytes. That means the WHOLE data object and ONLY the data object, 
             * not of the content that is of interest to the user. For cases where 
             * the content size is different (e.g. in compressed files the 
             * content is larger, in messages the content excludes headings 
             * and is smaller) use more specific properties, not necessarily 
             * subproperties of this one. 
             */
            void setByteSize( const qint64& value );

            /**
             * \return The URI of the property 'byteSize'. 
             */
            static QUrl byteSizeUri();

            /**
             * Get property 'belongsToContainer'. Models the containment 
             * relations between Files and Folders (or CompressedFiles). 
             */
            QList<DataContainer> belongsToContainers() const;

            /**
             * Set property 'belongsToContainer'. Models the containment 
             * relations between Files and Folders (or CompressedFiles). 
             */
            void setBelongsToContainers( const QList<DataContainer>& value );

            /**
             * Add a value to property 'belongsToContainer'. Models the containment 
             * relations between Files and Folders (or CompressedFiles). 
             */
            void addBelongsToContainer( const DataContainer& value );

            /**
             * \return The URI of the property 'belongsToContainer'. 
             */
            static QUrl belongsToContainerUri();

            /**
             * Get all resources that have this resource set as property 'depends'. 
             * Dependency relation. A piece of content depends on another 
             * piece of data in order to be properly understood/used/interpreted. 
             * \sa ResourceManager::allResourcesWithProperty 
             */
            QList<Resource> dependsOf() const;

            /**
             * Get all resources that have this resource set as property 'links'. 
             * A linking relation. A piece of content links/mentions a piece 
             * of data \sa ResourceManager::allResourcesWithProperty 
             */
            QList<InformationElement> linksOf() const;

            /**
             * Get all resources that have this resource set as property 'relatedTo'. 
             * A common superproperty for all relations between a piece of 
             * content and other pieces of data (which may be interpreted as 
             * other pieces of content). \sa ResourceManager::allResourcesWithProperty 
             */
            QList<InformationElement> relatedToOf() const;

            /**
             * Get all resources that have this resource set as property 'key'. 
             * An encryption key attached to a contact. Inspired by the KEY 
             * property defined in RFC 2426 sec. 3.7.2 \sa ResourceManager::allResourcesWithProperty 
             */
            QList<Contact> keyOf() const;

            /**
             * Get all resources that have this resource set as property 'logo'. 
             * Logo of a company. Inspired by the LOGO property defined in RFC 
             * 2426 sec. 3.5.3 \sa ResourceManager::allResourcesWithProperty 
             */
            QList<OrganizationContact> logoOf() const;

            /**
             * Get all resources that have this resource set as property 'photo'. 
             * Photograph attached to a Contact. The DataObject refered to 
             * by this property is usually interpreted as an nfo:Image. Inspired 
             * by the PHOTO property defined in RFC 2426 sec. 3.1.4 \sa ResourceManager::allResourcesWithProperty 
             */
            QList<Contact> photoOf() const;

            /**
             * Get all resources that have this resource set as property 'sound'. 
             * Sound clip attached to a Contact. The DataObject refered to 
             * by this property is usually interpreted as an nfo:Audio. Inspired 
             * by the SOUND property defined in RFC 2425 sec. 3.6.6. \sa ResourceManager::allResourcesWithProperty 
             */
            QList<Contact> soundOf() const;

            /**
             * Get all resources that have this resource set as property 'MediaStream'. 
             * Connects a media container with a single media stream contained 
             * within. \sa ResourceManager::allResourcesWithProperty 
             */
            QList<Media> mediaStreamOf() const;

            /**
             * Retrieve a list of all available DataObject resources. This 
             * list consists of all resource of type DataObject that are stored 
             * in the local Nepomuk meta data storage and any changes made locally. 
             * Be aware that in some cases this list can get very big. Then it 
             * might be better to use libKNep directly. 
             */
            static QList<DataObject> allDataObjects();


        /**
         * \return The URI of the resource type that is used in DataObject instances.
         */
        static QString resourceTypeUri();

    protected:
       DataObject( const QString& uri, const QUrl& type );
       DataObject( const QUrl& uri, const QUrl& type );
   };
}

#endif

/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk/tools.h>
#include <nepomuk/variant.h>
#include <nepomuk/resourcemanager.h>
#include "software.h"

#include "software.h"
Nepomuk::Software::Software()
  : InformationElement( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Software") )
{
}


Nepomuk::Software::Software( const Software& res )
  : InformationElement( res )
{
}


Nepomuk::Software::Software( const Nepomuk::Resource& res )
  : InformationElement( res )
{
}


Nepomuk::Software::Software( const QString& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Software") )
{
}

Nepomuk::Software::Software( const QUrl& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Software") )
{
}

Nepomuk::Software::Software( const QString& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}

Nepomuk::Software::Software( const QUrl& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}

Nepomuk::Software::~Software()
{
}


Nepomuk::Software& Nepomuk::Software::operator=( const Software& res )
{
    Resource::operator=( res );
    return *this;
}


QString Nepomuk::Software::resourceTypeUri()
{
    return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Software";
}

QList<Nepomuk::Software> Nepomuk::Software::conflictses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Software>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#conflicts") ).toResourceList() );
}

void Nepomuk::Software::setConflictses( const QList<Nepomuk::Software>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Software>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#conflicts"), Variant( l ) );
}

void Nepomuk::Software::addConflicts( const Nepomuk::Software& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#conflicts") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#conflicts"), v );
}

QUrl Nepomuk::Software::conflictsUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#conflicts");
}

QList<Nepomuk::Software> Nepomuk::Software::supercedeses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Software>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#supercedes") ).toResourceList() );
}

void Nepomuk::Software::setSupercedeses( const QList<Nepomuk::Software>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Software>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#supercedes"), Variant( l ) );
}

void Nepomuk::Software::addSupercedes( const Nepomuk::Software& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#supercedes") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#supercedes"), v );
}

QUrl Nepomuk::Software::supercedesUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#supercedes");
}

QList<Nepomuk::Software> Nepomuk::Software::conflictsOf() const
{
    return convertResourceList<Software>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#conflicts"), *this ) );
}

QList<Nepomuk::Software> Nepomuk::Software::supercedesOf() const
{
    return convertResourceList<Software>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#supercedes"), *this ) );
}

QList<Nepomuk::Software> Nepomuk::Software::allSoftwares()
{
    return Nepomuk::convertResourceList<Software>( ResourceManager::instance()->allResourcesOfType( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Software") ) );
}



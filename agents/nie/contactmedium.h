/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _CONTACTMEDIUM_H_
#define _CONTACTMEDIUM_H_

namespace Nepomuk {
        class Role;
}

#include <nepomuk/resource.h>
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * A superclass for all contact media - ways to contact an entity 
 * represented by a Contact instance. Some of the subclasses of 
 * this class (the various kinds of telephone numbers and postal 
 * addresses) have been inspired by the values of the TYPE parameter 
 * of ADR and TEL properties defined in RFC 2426 sec. 3.2.1. and 
 * 3.3.1 respectively. Each value is represented by an appropriate 
 * subclass with two major exceptions TYPE=home and TYPE=work. 
 * They are to be expressed by the roles these contact media are 
 * attached to i.e. contact media with TYPE=home parameter are 
 * to be attached to the default role (nco:Contact or nco:PersonContact), 
 * whereas media with TYPE=work parameter should be attached 
 * to nco:Affiliation or nco:OrganizationContact. 
 */
    class NEPOMUK_EXPORT ContactMedium : public Resource
    {
    public:
        /**
         * Create a new empty and invalid ContactMedium instance
         */
        ContactMedium();
        /**
         * Default copy constructor
         */
        ContactMedium( const ContactMedium& );
        ContactMedium( const Resource& );
        /**
         * Create a new ContactMedium instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        ContactMedium( const QString& uriOrIdentifier );
        /**
         * Create a new ContactMedium instance representing the resource
         * referenced by \a uri.
         */
        ContactMedium( const QUrl& uri );
        ~ContactMedium();

        ContactMedium& operator=( const ContactMedium& );

            /**
             * Get property 'contactMediumComment'. A comment about the 
             * contact medium. 
             */
            QStringList contactMediumComments() const;

            /**
             * Set property 'contactMediumComment'. A comment about the 
             * contact medium. 
             */
            void setContactMediumComments( const QStringList& value );

            /**
             * Add a value to property 'contactMediumComment'. A comment 
             * about the contact medium. 
             */
            void addContactMediumComment( const QString& value );

            /**
             * \return The URI of the property 'contactMediumComment'. 
             */
            static QUrl contactMediumCommentUri();

            /**
             * Get all resources that have this resource set as property 'ContactMedium'. 
             * A superProperty for all properties linking a Contact to an instance 
             * of a contact medium. \sa ResourceManager::allResourcesWithProperty 
             */
            QList<Role> contactMediumOf() const;

            /**
             * Retrieve a list of all available ContactMedium resources. 
             * This list consists of all resource of type ContactMedium that 
             * are stored in the local Nepomuk meta data storage and any changes 
             * made locally. Be aware that in some cases this list can get very 
             * big. Then it might be better to use libKNep directly. 
             */
            static QList<ContactMedium> allContactMediums();


        /**
         * \return The URI of the resource type that is used in ContactMedium instances.
         */
        static QString resourceTypeUri();

    protected:
       ContactMedium( const QString& uri, const QUrl& type );
       ContactMedium( const QUrl& uri, const QUrl& type );
   };
}

#endif

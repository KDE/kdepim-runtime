/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _MEDIA_H_
#define _MEDIA_H_

namespace Nepomuk {
        class CompressionType;
        class DataObject;
}

#include "informationelement.h"
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * A piece of media content. This class may be used to express complex 
 * media containers with many streams of various media content 
 * (both aural and visual). 
 */
    class NEPOMUK_EXPORT Media : public InformationElement
    {
    public:
        /**
         * Create a new empty and invalid Media instance
         */
        Media();
        /**
         * Default copy constructor
         */
        Media( const Media& );
        Media( const Resource& );
        /**
         * Create a new Media instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Media( const QString& uriOrIdentifier );
        /**
         * Create a new Media instance representing the resource
         * referenced by \a uri.
         */
        Media( const QUrl& uri );
        ~Media();

        Media& operator=( const Media& );

            /**
             * Get property 'duration'. Duration of a media piece. 
             */
            QList<QDateTime> durations() const;

            /**
             * Set property 'duration'. Duration of a media piece. 
             */
            void setDurations( const QList<QDateTime>& value );

            /**
             * Add a value to property 'duration'. Duration of a media piece. 
             */
            void addDuration( const QDateTime& value );

            /**
             * \return The URI of the property 'duration'. 
             */
            static QUrl durationUri();

            /**
             * Get property 'count'. A common superproperty for all properties 
             * signifying the amount of atomic media data units. Examples 
             * of subproperties may include sampleCount and frameCount. 
             */
            QList<qint64> counts() const;

            /**
             * Set property 'count'. A common superproperty for all properties 
             * signifying the amount of atomic media data units. Examples 
             * of subproperties may include sampleCount and frameCount. 
             */
            void setCounts( const QList<qint64>& value );

            /**
             * Add a value to property 'count'. A common superproperty for 
             * all properties signifying the amount of atomic media data units. 
             * Examples of subproperties may include sampleCount and frameCount. 
             */
            void addCount( const qint64& value );

            /**
             * \return The URI of the property 'count'. 
             */
            static QUrl countUri();

            /**
             * Get property 'compressionType'. The type of the compression. 
             * Values include, 'lossy' and 'lossless'. 
             */
            QList<CompressionType> compressionTypes() const;

            /**
             * Set property 'compressionType'. The type of the compression. 
             * Values include, 'lossy' and 'lossless'. 
             */
            void setCompressionTypes( const QList<CompressionType>& value );

            /**
             * Add a value to property 'compressionType'. The type of the compression. 
             * Values include, 'lossy' and 'lossless'. 
             */
            void addCompressionType( const CompressionType& value );

            /**
             * \return The URI of the property 'compressionType'. 
             */
            static QUrl compressionTypeUri();

            /**
             * Get property 'MediaStream'. Connects a media container with 
             * a single media stream contained within. 
             */
            QList<DataObject> mediaStreams() const;

            /**
             * Set property 'MediaStream'. Connects a media container with 
             * a single media stream contained within. 
             */
            void setMediaStreams( const QList<DataObject>& value );

            /**
             * Add a value to property 'MediaStream'. Connects a media container 
             * with a single media stream contained within. 
             */
            void addMediaStream( const DataObject& value );

            /**
             * \return The URI of the property 'MediaStream'. 
             */
            static QUrl mediaStreamUri();

            /**
             * Get property 'bitDepth'. A common superproperty for all properties 
             * signifying the amount of bits for an atomic unit of data. Examples 
             * of subproperties may include bitsPerSample and bitsPerPixel 
             */
            QStringList bitDepths() const;

            /**
             * Set property 'bitDepth'. A common superproperty for all properties 
             * signifying the amount of bits for an atomic unit of data. Examples 
             * of subproperties may include bitsPerSample and bitsPerPixel 
             */
            void setBitDepths( const QStringList& value );

            /**
             * Add a value to property 'bitDepth'. A common superproperty 
             * for all properties signifying the amount of bits for an atomic 
             * unit of data. Examples of subproperties may include bitsPerSample 
             * and bitsPerPixel 
             */
            void addBitDepth( const QString& value );

            /**
             * \return The URI of the property 'bitDepth'. 
             */
            static QUrl bitDepthUri();

            /**
             * Get property 'rate'. A common superproperty for all properties 
             * specifying the media rate. Examples of subproperties may include 
             * frameRate for video and sampleRate for audio. This property 
             * is expressed in units per second. 
             */
            QList<double> rates() const;

            /**
             * Set property 'rate'. A common superproperty for all properties 
             * specifying the media rate. Examples of subproperties may include 
             * frameRate for video and sampleRate for audio. This property 
             * is expressed in units per second. 
             */
            void setRates( const QList<double>& value );

            /**
             * Add a value to property 'rate'. A common superproperty for all 
             * properties specifying the media rate. Examples of subproperties 
             * may include frameRate for video and sampleRate for audio. This 
             * property is expressed in units per second. 
             */
            void addRate( const double& value );

            /**
             * \return The URI of the property 'rate'. 
             */
            static QUrl rateUri();

            /**
             * Get property 'codec'. The name of the codec necessary to decode 
             * a piece of media. 
             */
            QStringList codecs() const;

            /**
             * Set property 'codec'. The name of the codec necessary to decode 
             * a piece of media. 
             */
            void setCodecs( const QStringList& value );

            /**
             * Add a value to property 'codec'. The name of the codec necessary 
             * to decode a piece of media. 
             */
            void addCodec( const QString& value );

            /**
             * \return The URI of the property 'codec'. 
             */
            static QUrl codecUri();

            /**
             * Get property 'bitrateType'. The type of the bitrate. Examples 
             * may include CBR and VBR. 
             */
            QStringList bitrateTypes() const;

            /**
             * Set property 'bitrateType'. The type of the bitrate. Examples 
             * may include CBR and VBR. 
             */
            void setBitrateTypes( const QStringList& value );

            /**
             * Add a value to property 'bitrateType'. The type of the bitrate. 
             * Examples may include CBR and VBR. 
             */
            void addBitrateType( const QString& value );

            /**
             * \return The URI of the property 'bitrateType'. 
             */
            static QUrl bitrateTypeUri();

            /**
             * Get property 'averageBitrate'. The average overall bitrate 
             * of a media container. (i.e. the size of the piece of media in bits, 
             * divided by it's duration expressed in seconds). 
             */
            QList<double> averageBitrates() const;

            /**
             * Set property 'averageBitrate'. The average overall bitrate 
             * of a media container. (i.e. the size of the piece of media in bits, 
             * divided by it's duration expressed in seconds). 
             */
            void setAverageBitrates( const QList<double>& value );

            /**
             * Add a value to property 'averageBitrate'. The average overall 
             * bitrate of a media container. (i.e. the size of the piece of media 
             * in bits, divided by it's duration expressed in seconds). 
             */
            void addAverageBitrate( const double& value );

            /**
             * \return The URI of the property 'averageBitrate'. 
             */
            static QUrl averageBitrateUri();

            /**
             * Retrieve a list of all available Media resources. This list 
             * consists of all resource of type Media that are stored in the 
             * local Nepomuk meta data storage and any changes made locally. 
             * Be aware that in some cases this list can get very big. Then it 
             * might be better to use libKNep directly. 
             */
            static QList<Media> allMedias();


        /**
         * \return The URI of the resource type that is used in Media instances.
         */
        static QString resourceTypeUri();

    protected:
       Media( const QString& uri, const QUrl& type );
       Media( const QUrl& uri, const QUrl& type );
   };
}

#endif

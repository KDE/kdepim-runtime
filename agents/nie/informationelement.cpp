/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk/tools.h>
#include <nepomuk/variant.h>
#include <nepomuk/resourcemanager.h>
#include "informationelement.h"

#include "datasource.h"
#include "dataobject.h"
#include "informationelement.h"
#include "contact.h"
Nepomuk::InformationElement::InformationElement()
  : Resource( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement") )
{
}


Nepomuk::InformationElement::InformationElement( const InformationElement& res )
  : Resource( res )
{
}


Nepomuk::InformationElement::InformationElement( const Nepomuk::Resource& res )
  : Resource( res )
{
}


Nepomuk::InformationElement::InformationElement( const QString& uri )
  : Resource( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement") )
{
}

Nepomuk::InformationElement::InformationElement( const QUrl& uri )
  : Resource( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement") )
{
}

Nepomuk::InformationElement::InformationElement( const QString& uri, const QUrl& type )
  : Resource( uri, type )
{
}

Nepomuk::InformationElement::InformationElement( const QUrl& uri, const QUrl& type )
  : Resource( uri, type )
{
}

Nepomuk::InformationElement::~InformationElement()
{
}


Nepomuk::InformationElement& Nepomuk::InformationElement::operator=( const InformationElement& res )
{
    Resource::operator=( res );
    return *this;
}


QString Nepomuk::InformationElement::resourceTypeUri()
{
    return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement";
}

QStringList Nepomuk::InformationElement::characterSets() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#characterSet") ).toStringList());
}

void Nepomuk::InformationElement::setCharacterSets( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#characterSet"), Variant( value ) );
}

void Nepomuk::InformationElement::addCharacterSet( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#characterSet") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#characterSet"), v );
}

QUrl Nepomuk::InformationElement::characterSetUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#characterSet");
}

QList<QDateTime> Nepomuk::InformationElement::informationElementDates() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#informationElementDate") ).toDateTimeList());
}

void Nepomuk::InformationElement::setInformationElementDates( const QList<QDateTime>& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#informationElementDate"), Variant( value ) );
}

void Nepomuk::InformationElement::addInformationElementDate( const QDateTime& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#informationElementDate") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#informationElementDate"), v );
}

QUrl Nepomuk::InformationElement::informationElementDateUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#informationElementDate");
}

QList<Nepomuk::DataSource> Nepomuk::InformationElement::rootElementOfs() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<DataSource>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#rootElementOf") ).toResourceList() );
}

void Nepomuk::InformationElement::setRootElementOfs( const QList<Nepomuk::DataSource>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DataSource>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#rootElementOf"), Variant( l ) );
}

void Nepomuk::InformationElement::addRootElementOf( const Nepomuk::DataSource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#rootElementOf") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#rootElementOf"), v );
}

QUrl Nepomuk::InformationElement::rootElementOfUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#rootElementOf");
}

QStringList Nepomuk::InformationElement::legals() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#legal") ).toStringList());
}

void Nepomuk::InformationElement::setLegals( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#legal"), Variant( value ) );
}

void Nepomuk::InformationElement::addLegal( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#legal") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#legal"), v );
}

QUrl Nepomuk::InformationElement::legalUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#legal");
}

QList<Nepomuk::DataObject> Nepomuk::InformationElement::isStoredAses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<DataObject>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isStoredAs") ).toResourceList() );
}

void Nepomuk::InformationElement::setIsStoredAses( const QList<Nepomuk::DataObject>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DataObject>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isStoredAs"), Variant( l ) );
}

void Nepomuk::InformationElement::addIsStoredAs( const Nepomuk::DataObject& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isStoredAs") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isStoredAs"), v );
}

QUrl Nepomuk::InformationElement::isStoredAsUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isStoredAs");
}

QStringList Nepomuk::InformationElement::languages() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language") ).toStringList());
}

void Nepomuk::InformationElement::setLanguages( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language"), Variant( value ) );
}

void Nepomuk::InformationElement::addLanguage( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language"), v );
}

QUrl Nepomuk::InformationElement::languageUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language");
}

QStringList Nepomuk::InformationElement::mimeTypes() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#mimeType") ).toStringList());
}

void Nepomuk::InformationElement::setMimeTypes( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#mimeType"), Variant( value ) );
}

void Nepomuk::InformationElement::addMimeType( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#mimeType") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#mimeType"), v );
}

QUrl Nepomuk::InformationElement::mimeTypeUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#mimeType");
}

QStringList Nepomuk::InformationElement::versions() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#version") ).toStringList());
}

void Nepomuk::InformationElement::setVersions( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#version"), Variant( value ) );
}

void Nepomuk::InformationElement::addVersion( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#version") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#version"), v );
}

QUrl Nepomuk::InformationElement::versionUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#version");
}

QList<Nepomuk::DataObject> Nepomuk::InformationElement::linkses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<DataObject>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links") ).toResourceList() );
}

void Nepomuk::InformationElement::setLinkses( const QList<Nepomuk::DataObject>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DataObject>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links"), Variant( l ) );
}

void Nepomuk::InformationElement::addLinks( const Nepomuk::DataObject& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links"), v );
}

QUrl Nepomuk::InformationElement::linksUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links");
}

QStringList Nepomuk::InformationElement::generators() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generator") ).toStringList());
}

void Nepomuk::InformationElement::setGenerators( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generator"), Variant( value ) );
}

void Nepomuk::InformationElement::addGenerator( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generator") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generator"), v );
}

QUrl Nepomuk::InformationElement::generatorUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generator");
}

QStringList Nepomuk::InformationElement::descriptions() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#description") ).toStringList());
}

void Nepomuk::InformationElement::setDescriptions( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#description"), Variant( value ) );
}

void Nepomuk::InformationElement::addDescription( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#description") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#description"), v );
}

QUrl Nepomuk::InformationElement::descriptionUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#description");
}

QDateTime Nepomuk::InformationElement::contentCreated() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentCreated") ).toDateTimeList() << QDateTime() ).first();
}

void Nepomuk::InformationElement::setContentCreated( const QDateTime& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentCreated"), Variant( value ) );
}

QUrl Nepomuk::InformationElement::contentCreatedUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentCreated");
}

QStringList Nepomuk::InformationElement::titles() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title") ).toStringList());
}

void Nepomuk::InformationElement::setTitles( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title"), Variant( value ) );
}

void Nepomuk::InformationElement::addTitle( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title"), v );
}

QUrl Nepomuk::InformationElement::titleUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title");
}

QDateTime Nepomuk::InformationElement::contentLastModified() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentLastModified") ).toDateTimeList() << QDateTime() ).first();
}

void Nepomuk::InformationElement::setContentLastModified( const QDateTime& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentLastModified"), Variant( value ) );
}

QUrl Nepomuk::InformationElement::contentLastModifiedUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentLastModified");
}

QStringList Nepomuk::InformationElement::keywords() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#keyword") ).toStringList());
}

void Nepomuk::InformationElement::setKeywords( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#keyword"), Variant( value ) );
}

void Nepomuk::InformationElement::addKeyword( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#keyword") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#keyword"), v );
}

QUrl Nepomuk::InformationElement::keywordUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#keyword");
}

QList<Nepomuk::InformationElement> Nepomuk::InformationElement::isLogicalPartOfs() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<InformationElement>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isLogicalPartOf") ).toResourceList() );
}

void Nepomuk::InformationElement::setIsLogicalPartOfs( const QList<Nepomuk::InformationElement>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<InformationElement>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isLogicalPartOf"), Variant( l ) );
}

void Nepomuk::InformationElement::addIsLogicalPartOf( const Nepomuk::InformationElement& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isLogicalPartOf") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isLogicalPartOf"), v );
}

QUrl Nepomuk::InformationElement::isLogicalPartOfUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isLogicalPartOf");
}

QStringList Nepomuk::InformationElement::identifiers() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier") ).toStringList());
}

void Nepomuk::InformationElement::setIdentifiers( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier"), Variant( value ) );
}

void Nepomuk::InformationElement::addIdentifier( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier"), v );
}

QUrl Nepomuk::InformationElement::identifierUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier");
}

QStringList Nepomuk::InformationElement::plainTextContents() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent") ).toStringList());
}

void Nepomuk::InformationElement::setPlainTextContents( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent"), Variant( value ) );
}

void Nepomuk::InformationElement::addPlainTextContent( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent"), v );
}

QUrl Nepomuk::InformationElement::plainTextContentUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent");
}

QList<Nepomuk::DataObject> Nepomuk::InformationElement::relatedTos() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<DataObject>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#relatedTo") ).toResourceList() );
}

void Nepomuk::InformationElement::setRelatedTos( const QList<Nepomuk::DataObject>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DataObject>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#relatedTo"), Variant( l ) );
}

void Nepomuk::InformationElement::addRelatedTo( const Nepomuk::DataObject& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#relatedTo") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#relatedTo"), v );
}

QUrl Nepomuk::InformationElement::relatedToUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#relatedTo");
}

QStringList Nepomuk::InformationElement::comments() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#comment") ).toStringList());
}

void Nepomuk::InformationElement::setComments( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#comment"), Variant( value ) );
}

void Nepomuk::InformationElement::addComment( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#comment") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#comment"), v );
}

QUrl Nepomuk::InformationElement::commentUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#comment");
}

QList<qint64> Nepomuk::InformationElement::contentSizes() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentSize") ).toInt64List());
}

void Nepomuk::InformationElement::setContentSizes( const QList<qint64>& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentSize"), Variant( value ) );
}

void Nepomuk::InformationElement::addContentSize( const qint64& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentSize") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentSize"), v );
}

QUrl Nepomuk::InformationElement::contentSizeUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentSize");
}

QStringList Nepomuk::InformationElement::subjects() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#subject") ).toStringList());
}

void Nepomuk::InformationElement::setSubjects( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#subject"), Variant( value ) );
}

void Nepomuk::InformationElement::addSubject( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#subject") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#subject"), v );
}

QUrl Nepomuk::InformationElement::subjectUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#subject");
}

QList<Nepomuk::DataObject> Nepomuk::InformationElement::parts() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<DataObject>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart") ).toResourceList() );
}

void Nepomuk::InformationElement::setParts( const QList<Nepomuk::DataObject>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DataObject>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart"), Variant( l ) );
}

void Nepomuk::InformationElement::addPart( const Nepomuk::DataObject& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart"), v );
}

QUrl Nepomuk::InformationElement::partUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart");
}

QList<Nepomuk::InformationElement> Nepomuk::InformationElement::logicalParts() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<InformationElement>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart") ).toResourceList() );
}

void Nepomuk::InformationElement::setLogicalParts( const QList<Nepomuk::InformationElement>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<InformationElement>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart"), Variant( l ) );
}

void Nepomuk::InformationElement::addLogicalPart( const Nepomuk::InformationElement& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart"), v );
}

QUrl Nepomuk::InformationElement::logicalPartUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart");
}

QList<Nepomuk::Contact> Nepomuk::InformationElement::creators() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Contact>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator") ).toResourceList() );
}

void Nepomuk::InformationElement::setCreators( const QList<Nepomuk::Contact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Contact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator"), Variant( l ) );
}

void Nepomuk::InformationElement::addCreator( const Nepomuk::Contact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator"), v );
}

QUrl Nepomuk::InformationElement::creatorUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator");
}

QList<Nepomuk::Contact> Nepomuk::InformationElement::contributors() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Contact>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contributor") ).toResourceList() );
}

void Nepomuk::InformationElement::setContributors( const QList<Nepomuk::Contact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Contact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contributor"), Variant( l ) );
}

void Nepomuk::InformationElement::addContributor( const Nepomuk::Contact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contributor") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contributor"), v );
}

QUrl Nepomuk::InformationElement::contributorUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contributor");
}

QList<Nepomuk::Contact> Nepomuk::InformationElement::publishers() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Contact>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#publisher") ).toResourceList() );
}

void Nepomuk::InformationElement::setPublishers( const QList<Nepomuk::Contact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Contact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#publisher"), Variant( l ) );
}

void Nepomuk::InformationElement::addPublisher( const Nepomuk::Contact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#publisher") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#publisher"), v );
}

QUrl Nepomuk::InformationElement::publisherUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#publisher");
}

QList<Nepomuk::InformationElement> Nepomuk::InformationElement::allInformationElements()
{
    return Nepomuk::convertResourceList<InformationElement>( ResourceManager::instance()->allResourcesOfType( QUrl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement") ) );
}



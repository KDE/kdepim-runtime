/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _VISUAL_H_
#define _VISUAL_H_

namespace Nepomuk {
}

#include "media.h"
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * File containing visual content. 
 */
    class NEPOMUK_EXPORT Visual : public Media
    {
    public:
        /**
         * Create a new empty and invalid Visual instance
         */
        Visual();
        /**
         * Default copy constructor
         */
        Visual( const Visual& );
        Visual( const Resource& );
        /**
         * Create a new Visual instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Visual( const QString& uriOrIdentifier );
        /**
         * Create a new Visual instance representing the resource
         * referenced by \a uri.
         */
        Visual( const QUrl& uri );
        ~Visual();

        Visual& operator=( const Visual& );

            /**
             * Get property 'aspectRatio'. Visual content aspect ratio. 
             * (Width divided by Height) 
             */
            QList<double> aspectRatios() const;

            /**
             * Set property 'aspectRatio'. Visual content aspect ratio. 
             * (Width divided by Height) 
             */
            void setAspectRatios( const QList<double>& value );

            /**
             * Add a value to property 'aspectRatio'. Visual content aspect 
             * ratio. (Width divided by Height) 
             */
            void addAspectRatio( const double& value );

            /**
             * \return The URI of the property 'aspectRatio'. 
             */
            static QUrl aspectRatioUri();

            /**
             * Get property 'interlaceMode'. True if the image is interlaced, 
             * false if not. 
             */
            QList<bool> interlaceModes() const;

            /**
             * Set property 'interlaceMode'. True if the image is interlaced, 
             * false if not. 
             */
            void setInterlaceModes( const QList<bool>& value );

            /**
             * Add a value to property 'interlaceMode'. True if the image is 
             * interlaced, false if not. 
             */
            void addInterlaceMode( const bool& value );

            /**
             * \return The URI of the property 'interlaceMode'. 
             */
            static QUrl interlaceModeUri();

            /**
             * Get property 'height'. Visual content height in pixels. 
             */
            QList<qint64> heights() const;

            /**
             * Set property 'height'. Visual content height in pixels. 
             */
            void setHeights( const QList<qint64>& value );

            /**
             * Add a value to property 'height'. Visual content height in pixels. 
             */
            void addHeight( const qint64& value );

            /**
             * \return The URI of the property 'height'. 
             */
            static QUrl heightUri();

            /**
             * Get property 'width'. Visual content width in pixels. 
             */
            QList<qint64> widths() const;

            /**
             * Set property 'width'. Visual content width in pixels. 
             */
            void setWidths( const QList<qint64>& value );

            /**
             * Add a value to property 'width'. Visual content width in pixels. 
             */
            void addWidth( const qint64& value );

            /**
             * \return The URI of the property 'width'. 
             */
            static QUrl widthUri();

            /**
             * Get property 'colorDepth'. Amount of bits used to express the 
             * color of each pixel. 
             */
            QList<qint64> colorDepths() const;

            /**
             * Set property 'colorDepth'. Amount of bits used to express the 
             * color of each pixel. 
             */
            void setColorDepths( const QList<qint64>& value );

            /**
             * Add a value to property 'colorDepth'. Amount of bits used to 
             * express the color of each pixel. 
             */
            void addColorDepth( const qint64& value );

            /**
             * \return The URI of the property 'colorDepth'. 
             */
            static QUrl colorDepthUri();

            /**
             * Retrieve a list of all available Visual resources. This list 
             * consists of all resource of type Visual that are stored in the 
             * local Nepomuk meta data storage and any changes made locally. 
             * Be aware that in some cases this list can get very big. Then it 
             * might be better to use libKNep directly. 
             */
            static QList<Visual> allVisuals();


        /**
         * \return The URI of the resource type that is used in Visual instances.
         */
        static QString resourceTypeUri();

    protected:
       Visual( const QString& uri, const QUrl& type );
       Visual( const QUrl& uri, const QUrl& type );
   };
}

#endif

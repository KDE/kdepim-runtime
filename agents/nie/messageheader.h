/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _MESSAGEHEADER_H_
#define _MESSAGEHEADER_H_

namespace Nepomuk {
        class Message;
}

#include <nepomuk/resource.h>
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * An arbitrary message header. 
 */
    class NEPOMUK_EXPORT MessageHeader : public Resource
    {
    public:
        /**
         * Create a new empty and invalid MessageHeader instance
         */
        MessageHeader();
        /**
         * Default copy constructor
         */
        MessageHeader( const MessageHeader& );
        MessageHeader( const Resource& );
        /**
         * Create a new MessageHeader instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        MessageHeader( const QString& uriOrIdentifier );
        /**
         * Create a new MessageHeader instance representing the resource
         * referenced by \a uri.
         */
        MessageHeader( const QUrl& uri );
        ~MessageHeader();

        MessageHeader& operator=( const MessageHeader& );

            /**
             * Get property 'headerName'. Name of the message header. 
             */
            QString headerName() const;

            /**
             * Set property 'headerName'. Name of the message header. 
             */
            void setHeaderName( const QString& value );

            /**
             * \return The URI of the property 'headerName'. 
             */
            static QUrl headerNameUri();

            /**
             * Get property 'headerValue'. Value of the message header. 
             */
            QString headerValue() const;

            /**
             * Set property 'headerValue'. Value of the message header. 
             */
            void setHeaderValue( const QString& value );

            /**
             * \return The URI of the property 'headerValue'. 
             */
            static QUrl headerValueUri();

            /**
             * Get all resources that have this resource set as property 'messageHeader'. 
             * Links the message wiith an arbitrary message header. \sa ResourceManager::allResourcesWithProperty 
             */
            QList<Message> messageHeaderOf() const;

            /**
             * Retrieve a list of all available MessageHeader resources. 
             * This list consists of all resource of type MessageHeader that 
             * are stored in the local Nepomuk meta data storage and any changes 
             * made locally. Be aware that in some cases this list can get very 
             * big. Then it might be better to use libKNep directly. 
             */
            static QList<MessageHeader> allMessageHeaders();


        /**
         * \return The URI of the resource type that is used in MessageHeader instances.
         */
        static QString resourceTypeUri();

    protected:
       MessageHeader( const QString& uri, const QUrl& type );
       MessageHeader( const QUrl& uri, const QUrl& type );
   };
}

#endif

/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk/tools.h>
#include <nepomuk/variant.h>
#include <nepomuk/resourcemanager.h>
#include "role.h"

#include "postaladdress.h"
#include "contactmedium.h"
#include "emailaddress.h"
#include "phonenumber.h"
#include "imaccount.h"
Nepomuk::Role::Role()
  : Resource( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Role") )
{
}


Nepomuk::Role::Role( const Role& res )
  : Resource( res )
{
}


Nepomuk::Role::Role( const Nepomuk::Resource& res )
  : Resource( res )
{
}


Nepomuk::Role::Role( const QString& uri )
  : Resource( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Role") )
{
}

Nepomuk::Role::Role( const QUrl& uri )
  : Resource( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Role") )
{
}

Nepomuk::Role::Role( const QString& uri, const QUrl& type )
  : Resource( uri, type )
{
}

Nepomuk::Role::Role( const QUrl& uri, const QUrl& type )
  : Resource( uri, type )
{
}

Nepomuk::Role::~Role()
{
}


Nepomuk::Role& Nepomuk::Role::operator=( const Role& res )
{
    Resource::operator=( res );
    return *this;
}


QString Nepomuk::Role::resourceTypeUri()
{
    return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Role";
}

QList<Nepomuk::PhoneNumber> Nepomuk::Role::phoneNumbers() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<PhoneNumber>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPhoneNumber") ).toResourceList() );
}

void Nepomuk::Role::setPhoneNumbers( const QList<Nepomuk::PhoneNumber>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<PhoneNumber>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPhoneNumber"), Variant( l ) );
}

void Nepomuk::Role::addPhoneNumber( const Nepomuk::PhoneNumber& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPhoneNumber") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPhoneNumber"), v );
}

QUrl Nepomuk::Role::phoneNumberUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPhoneNumber");
}

QList<Nepomuk::IMAccount> Nepomuk::Role::iMAccounts() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<IMAccount>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMAccount") ).toResourceList() );
}

void Nepomuk::Role::setIMAccounts( const QList<Nepomuk::IMAccount>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<IMAccount>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMAccount"), Variant( l ) );
}

void Nepomuk::Role::addIMAccount( const Nepomuk::IMAccount& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMAccount") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMAccount"), v );
}

QUrl Nepomuk::Role::iMAccountUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMAccount");
}

QList<Nepomuk::EmailAddress> Nepomuk::Role::emailAddresses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<EmailAddress>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasEmailAddress") ).toResourceList() );
}

void Nepomuk::Role::setEmailAddresses( const QList<Nepomuk::EmailAddress>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<EmailAddress>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasEmailAddress"), Variant( l ) );
}

void Nepomuk::Role::addEmailAddress( const Nepomuk::EmailAddress& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasEmailAddress") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasEmailAddress"), v );
}

QUrl Nepomuk::Role::emailAddressUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasEmailAddress");
}

QList<Nepomuk::PostalAddress> Nepomuk::Role::postalAddresses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<PostalAddress>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPostalAddress") ).toResourceList() );
}

void Nepomuk::Role::setPostalAddresses( const QList<Nepomuk::PostalAddress>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<PostalAddress>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPostalAddress"), Variant( l ) );
}

void Nepomuk::Role::addPostalAddress( const Nepomuk::PostalAddress& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPostalAddress") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPostalAddress"), v );
}

QUrl Nepomuk::Role::postalAddressUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPostalAddress");
}

QList<Nepomuk::Resource> Nepomuk::Role::foafUrls() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Resource>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#foafUrl") ).toResourceList() );
}

void Nepomuk::Role::setFoafUrls( const QList<Nepomuk::Resource>& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#foafUrl"), Variant( value ) );
}

void Nepomuk::Role::addFoafUrl( const Nepomuk::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#foafUrl") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#foafUrl"), v );
}

QUrl Nepomuk::Role::foafUrlUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#foafUrl");
}

QList<Nepomuk::Resource> Nepomuk::Role::websiteUrls() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Resource>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#websiteUrl") ).toResourceList() );
}

void Nepomuk::Role::setWebsiteUrls( const QList<Nepomuk::Resource>& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#websiteUrl"), Variant( value ) );
}

void Nepomuk::Role::addWebsiteUrl( const Nepomuk::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#websiteUrl") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#websiteUrl"), v );
}

QUrl Nepomuk::Role::websiteUrlUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#websiteUrl");
}

QList<Nepomuk::ContactMedium> Nepomuk::Role::contactMediums() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<ContactMedium>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasContactMedium") ).toResourceList() );
}

void Nepomuk::Role::setContactMediums( const QList<Nepomuk::ContactMedium>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<ContactMedium>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasContactMedium"), Variant( l ) );
}

void Nepomuk::Role::addContactMedium( const Nepomuk::ContactMedium& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasContactMedium") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasContactMedium"), v );
}

QUrl Nepomuk::Role::contactMediumUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasContactMedium");
}

QList<Nepomuk::Resource> Nepomuk::Role::urls() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Resource>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#url") ).toResourceList() );
}

void Nepomuk::Role::setUrls( const QList<Nepomuk::Resource>& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#url"), Variant( value ) );
}

void Nepomuk::Role::addUrl( const Nepomuk::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#url") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#url"), v );
}

QUrl Nepomuk::Role::urlUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#url");
}

QList<Nepomuk::Resource> Nepomuk::Role::blogUrls() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Resource>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#blogUrl") ).toResourceList() );
}

void Nepomuk::Role::setBlogUrls( const QList<Nepomuk::Resource>& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#blogUrl"), Variant( value ) );
}

void Nepomuk::Role::addBlogUrl( const Nepomuk::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#blogUrl") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#blogUrl"), v );
}

QUrl Nepomuk::Role::blogUrlUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#blogUrl");
}

QList<Nepomuk::Role> Nepomuk::Role::allRoles()
{
    return Nepomuk::convertResourceList<Role>( ResourceManager::instance()->allResourcesOfType( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Role") ) );
}



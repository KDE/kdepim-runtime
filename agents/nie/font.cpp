/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk/tools.h>
#include <nepomuk/variant.h>
#include <nepomuk/resourcemanager.h>
#include "font.h"

#include "contact.h"
Nepomuk::Font::Font()
  : InformationElement( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Font") )
{
}


Nepomuk::Font::Font( const Font& res )
  : InformationElement( res )
{
}


Nepomuk::Font::Font( const Nepomuk::Resource& res )
  : InformationElement( res )
{
}


Nepomuk::Font::Font( const QString& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Font") )
{
}

Nepomuk::Font::Font( const QUrl& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Font") )
{
}

Nepomuk::Font::Font( const QString& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}

Nepomuk::Font::Font( const QUrl& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}

Nepomuk::Font::~Font()
{
}


Nepomuk::Font& Nepomuk::Font::operator=( const Font& res )
{
    Resource::operator=( res );
    return *this;
}


QString Nepomuk::Font::resourceTypeUri()
{
    return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Font";
}

QStringList Nepomuk::Font::fontFamilys() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fontFamily") ).toStringList());
}

void Nepomuk::Font::setFontFamilys( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fontFamily"), Variant( value ) );
}

void Nepomuk::Font::addFontFamily( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fontFamily") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fontFamily"), v );
}

QUrl Nepomuk::Font::fontFamilyUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fontFamily");
}

QList<Nepomuk::Contact> Nepomuk::Font::foundrys() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Contact>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#foundry") ).toResourceList() );
}

void Nepomuk::Font::setFoundrys( const QList<Nepomuk::Contact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Contact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#foundry"), Variant( l ) );
}

void Nepomuk::Font::addFoundry( const Nepomuk::Contact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#foundry") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#foundry"), v );
}

QUrl Nepomuk::Font::foundryUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#foundry");
}

QList<Nepomuk::Font> Nepomuk::Font::allFonts()
{
    return Nepomuk::convertResourceList<Font>( ResourceManager::instance()->allResourcesOfType( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Font") ) );
}



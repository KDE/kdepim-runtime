/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk/tools.h>
#include <nepomuk/variant.h>
#include <nepomuk/resourcemanager.h>
#include "contact.h"

#include "font.h"
#include "filedataobject.h"
#include "dataobject.h"
#include "contact.h"
#include "message.h"
#include "contactgroup.h"
#include "informationelement.h"
#include "email.h"
Nepomuk::Contact::Contact()
  : Role( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Contact") )
{
}


Nepomuk::Contact::Contact( const Contact& res )
  : Role( res )
{
}


Nepomuk::Contact::Contact( const Nepomuk::Resource& res )
  : Role( res )
{
}


Nepomuk::Contact::Contact( const QString& uri )
  : Role( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Contact") )
{
}

Nepomuk::Contact::Contact( const QUrl& uri )
  : Role( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Contact") )
{
}

Nepomuk::Contact::Contact( const QString& uri, const QUrl& type )
  : Role( uri, type )
{
}

Nepomuk::Contact::Contact( const QUrl& uri, const QUrl& type )
  : Role( uri, type )
{
}

Nepomuk::Contact::~Contact()
{
}


Nepomuk::Contact& Nepomuk::Contact::operator=( const Contact& res )
{
    Resource::operator=( res );
    return *this;
}


QString Nepomuk::Contact::resourceTypeUri()
{
    return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Contact";
}

QStringList Nepomuk::Contact::locations() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasLocation") ).toStringList());
}

void Nepomuk::Contact::setLocations( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasLocation"), Variant( value ) );
}

void Nepomuk::Contact::addLocation( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasLocation") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasLocation"), v );
}

QUrl Nepomuk::Contact::locationUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasLocation");
}

QList<Nepomuk::DataObject> Nepomuk::Contact::keys() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<DataObject>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#key") ).toResourceList() );
}

void Nepomuk::Contact::setKeys( const QList<Nepomuk::DataObject>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DataObject>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#key"), Variant( l ) );
}

void Nepomuk::Contact::addKey( const Nepomuk::DataObject& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#key") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#key"), v );
}

QUrl Nepomuk::Contact::keyUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#key");
}

QList<Nepomuk::DataObject> Nepomuk::Contact::sounds() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<DataObject>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#sound") ).toResourceList() );
}

void Nepomuk::Contact::setSounds( const QList<Nepomuk::DataObject>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DataObject>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#sound"), Variant( l ) );
}

void Nepomuk::Contact::addSound( const Nepomuk::DataObject& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#sound") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#sound"), v );
}

QUrl Nepomuk::Contact::soundUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#sound");
}

QList<Nepomuk::DataObject> Nepomuk::Contact::photos() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<DataObject>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#photo") ).toResourceList() );
}

void Nepomuk::Contact::setPhotos( const QList<Nepomuk::DataObject>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DataObject>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#photo"), Variant( l ) );
}

void Nepomuk::Contact::addPhoto( const Nepomuk::DataObject& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#photo") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#photo"), v );
}

QUrl Nepomuk::Contact::photoUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#photo");
}

QList<Nepomuk::ContactGroup> Nepomuk::Contact::belongsToGroups() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<ContactGroup>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#belongsToGroup") ).toResourceList() );
}

void Nepomuk::Contact::setBelongsToGroups( const QList<Nepomuk::ContactGroup>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<ContactGroup>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#belongsToGroup"), Variant( l ) );
}

void Nepomuk::Contact::addBelongsToGroup( const Nepomuk::ContactGroup& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#belongsToGroup") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#belongsToGroup"), v );
}

QUrl Nepomuk::Contact::belongsToGroupUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#belongsToGroup");
}

QList<Nepomuk::Contact> Nepomuk::Contact::representatives() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Contact>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#representative") ).toResourceList() );
}

void Nepomuk::Contact::setRepresentatives( const QList<Nepomuk::Contact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Contact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#representative"), Variant( l ) );
}

void Nepomuk::Contact::addRepresentative( const Nepomuk::Contact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#representative") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#representative"), v );
}

QUrl Nepomuk::Contact::representativeUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#representative");
}

QStringList Nepomuk::Contact::notes() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#note") ).toStringList());
}

void Nepomuk::Contact::setNotes( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#note"), Variant( value ) );
}

void Nepomuk::Contact::addNote( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#note") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#note"), v );
}

QUrl Nepomuk::Contact::noteUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#note");
}

QStringList Nepomuk::Contact::nicknames() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nickname") ).toStringList());
}

void Nepomuk::Contact::setNicknames( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nickname"), Variant( value ) );
}

void Nepomuk::Contact::addNickname( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nickname") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nickname"), v );
}

QUrl Nepomuk::Contact::nicknameUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nickname");
}

QStringList Nepomuk::Contact::contactUIDs() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactUID") ).toStringList());
}

void Nepomuk::Contact::setContactUIDs( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactUID"), Variant( value ) );
}

void Nepomuk::Contact::addContactUID( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactUID") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactUID"), v );
}

QUrl Nepomuk::Contact::contactUIDUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactUID");
}

QStringList Nepomuk::Contact::fullnames() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#fullname") ).toStringList());
}

void Nepomuk::Contact::setFullnames( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#fullname"), Variant( value ) );
}

void Nepomuk::Contact::addFullname( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#fullname") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#fullname"), v );
}

QUrl Nepomuk::Contact::fullnameUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#fullname");
}

QDate Nepomuk::Contact::birthDate() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#birthDate") ).toDateList() << QDate() ).first();
}

void Nepomuk::Contact::setBirthDate( const QDate& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#birthDate"), Variant( value ) );
}

QUrl Nepomuk::Contact::birthDateUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#birthDate");
}

QList<Nepomuk::InformationElement> Nepomuk::Contact::contributorOf() const
{
    return convertResourceList<InformationElement>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contributor"), *this ) );
}

QList<Nepomuk::InformationElement> Nepomuk::Contact::creatorOf() const
{
    return convertResourceList<InformationElement>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator"), *this ) );
}

QList<Nepomuk::InformationElement> Nepomuk::Contact::publisherOf() const
{
    return convertResourceList<InformationElement>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#publisher"), *this ) );
}

QList<Nepomuk::Contact> Nepomuk::Contact::representativeOf() const
{
    return convertResourceList<Contact>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#representative"), *this ) );
}

QList<Nepomuk::Email> Nepomuk::Contact::bccOf() const
{
    return convertResourceList<Email>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#bcc"), *this ) );
}

QList<Nepomuk::Email> Nepomuk::Contact::ccOf() const
{
    return convertResourceList<Email>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#cc"), *this ) );
}

QList<Nepomuk::Message> Nepomuk::Contact::fromOf() const
{
    return convertResourceList<Message>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#from"), *this ) );
}

QList<Nepomuk::Message> Nepomuk::Contact::primaryRecipientOf() const
{
    return convertResourceList<Message>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#primaryRecipient"), *this ) );
}

QList<Nepomuk::Message> Nepomuk::Contact::recipientOf() const
{
    return convertResourceList<Message>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#recipient"), *this ) );
}

QList<Nepomuk::Message> Nepomuk::Contact::replyToOf() const
{
    return convertResourceList<Message>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#replyTo"), *this ) );
}

QList<Nepomuk::Message> Nepomuk::Contact::secondaryRecipientOf() const
{
    return convertResourceList<Message>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#secondaryRecipient"), *this ) );
}

QList<Nepomuk::Message> Nepomuk::Contact::senderOf() const
{
    return convertResourceList<Message>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sender"), *this ) );
}

QList<Nepomuk::Email> Nepomuk::Contact::toOf() const
{
    return convertResourceList<Email>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#to"), *this ) );
}

QList<Nepomuk::FileDataObject> Nepomuk::Contact::fileOwnerOf() const
{
    return convertResourceList<FileDataObject>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileOwner"), *this ) );
}

QList<Nepomuk::Font> Nepomuk::Contact::foundryOf() const
{
    return convertResourceList<Font>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#foundry"), *this ) );
}

Nepomuk::InformationElement Nepomuk::Contact::toInformationElement() const
{
    return Nepomuk::InformationElement( *this );
}

QList<Nepomuk::Contact> Nepomuk::Contact::allContacts()
{
    return Nepomuk::convertResourceList<Contact>( ResourceManager::instance()->allResourcesOfType( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Contact") ) );
}



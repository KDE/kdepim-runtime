/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk/tools.h>
#include <nepomuk/variant.h>
#include <nepomuk/resourcemanager.h>
#include "organizationcontact.h"

#include "affiliation.h"
#include "dataobject.h"
Nepomuk::OrganizationContact::OrganizationContact()
  : Contact( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#OrganizationContact") )
{
}


Nepomuk::OrganizationContact::OrganizationContact( const OrganizationContact& res )
  : Contact( res )
{
}


Nepomuk::OrganizationContact::OrganizationContact( const Nepomuk::Resource& res )
  : Contact( res )
{
}


Nepomuk::OrganizationContact::OrganizationContact( const QString& uri )
  : Contact( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#OrganizationContact") )
{
}

Nepomuk::OrganizationContact::OrganizationContact( const QUrl& uri )
  : Contact( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#OrganizationContact") )
{
}

Nepomuk::OrganizationContact::OrganizationContact( const QString& uri, const QUrl& type )
  : Contact( uri, type )
{
}

Nepomuk::OrganizationContact::OrganizationContact( const QUrl& uri, const QUrl& type )
  : Contact( uri, type )
{
}

Nepomuk::OrganizationContact::~OrganizationContact()
{
}


Nepomuk::OrganizationContact& Nepomuk::OrganizationContact::operator=( const OrganizationContact& res )
{
    Resource::operator=( res );
    return *this;
}


QString Nepomuk::OrganizationContact::resourceTypeUri()
{
    return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#OrganizationContact";
}

QList<Nepomuk::DataObject> Nepomuk::OrganizationContact::logos() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<DataObject>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#logo") ).toResourceList() );
}

void Nepomuk::OrganizationContact::setLogos( const QList<Nepomuk::DataObject>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DataObject>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#logo"), Variant( l ) );
}

void Nepomuk::OrganizationContact::addLogo( const Nepomuk::DataObject& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#logo") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#logo"), v );
}

QUrl Nepomuk::OrganizationContact::logoUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#logo");
}

QList<Nepomuk::Affiliation> Nepomuk::OrganizationContact::orgOf() const
{
    return convertResourceList<Affiliation>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#org"), *this ) );
}

QList<Nepomuk::OrganizationContact> Nepomuk::OrganizationContact::allOrganizationContacts()
{
    return Nepomuk::convertResourceList<OrganizationContact>( ResourceManager::instance()->allResourcesOfType( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#OrganizationContact") ) );
}



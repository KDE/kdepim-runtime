/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk/tools.h>
#include <nepomuk/variant.h>
#include <nepomuk/resourcemanager.h>
#include "imaccount.h"

#include "role.h"
Nepomuk::IMAccount::IMAccount()
  : ContactMedium( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#IMAccount") )
{
}


Nepomuk::IMAccount::IMAccount( const IMAccount& res )
  : ContactMedium( res )
{
}


Nepomuk::IMAccount::IMAccount( const Nepomuk::Resource& res )
  : ContactMedium( res )
{
}


Nepomuk::IMAccount::IMAccount( const QString& uri )
  : ContactMedium( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#IMAccount") )
{
}

Nepomuk::IMAccount::IMAccount( const QUrl& uri )
  : ContactMedium( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#IMAccount") )
{
}

Nepomuk::IMAccount::IMAccount( const QString& uri, const QUrl& type )
  : ContactMedium( uri, type )
{
}

Nepomuk::IMAccount::IMAccount( const QUrl& uri, const QUrl& type )
  : ContactMedium( uri, type )
{
}

Nepomuk::IMAccount::~IMAccount()
{
}


Nepomuk::IMAccount& Nepomuk::IMAccount::operator=( const IMAccount& res )
{
    Resource::operator=( res );
    return *this;
}


QString Nepomuk::IMAccount::resourceTypeUri()
{
    return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#IMAccount";
}

QString Nepomuk::IMAccount::imStatus() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatus") ).toStringList() << QString() ).first();
}

void Nepomuk::IMAccount::setImStatus( const QString& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatus"), Variant( value ) );
}

QUrl Nepomuk::IMAccount::imStatusUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatus");
}

QStringList Nepomuk::IMAccount::imNicknames() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imNickname") ).toStringList());
}

void Nepomuk::IMAccount::setImNicknames( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imNickname"), Variant( value ) );
}

void Nepomuk::IMAccount::addImNickname( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imNickname") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imNickname"), v );
}

QUrl Nepomuk::IMAccount::imNicknameUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imNickname");
}

QStringList Nepomuk::IMAccount::imAccountTypes() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imAccountType") ).toStringList());
}

void Nepomuk::IMAccount::setImAccountTypes( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imAccountType"), Variant( value ) );
}

void Nepomuk::IMAccount::addImAccountType( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imAccountType") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imAccountType"), v );
}

QUrl Nepomuk::IMAccount::imAccountTypeUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imAccountType");
}

QStringList Nepomuk::IMAccount::imStatusMessages() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatusMessage") ).toStringList());
}

void Nepomuk::IMAccount::setImStatusMessages( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatusMessage"), Variant( value ) );
}

void Nepomuk::IMAccount::addImStatusMessage( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatusMessage") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatusMessage"), v );
}

QUrl Nepomuk::IMAccount::imStatusMessageUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatusMessage");
}

QStringList Nepomuk::IMAccount::imIDs() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imID") ).toStringList());
}

void Nepomuk::IMAccount::setImIDs( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imID"), Variant( value ) );
}

void Nepomuk::IMAccount::addImID( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imID") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imID"), v );
}

QUrl Nepomuk::IMAccount::imIDUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imID");
}

QList<Nepomuk::Role> Nepomuk::IMAccount::iMAccountOf() const
{
    return convertResourceList<Role>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMAccount"), *this ) );
}

QList<Nepomuk::IMAccount> Nepomuk::IMAccount::allIMAccounts()
{
    return Nepomuk::convertResourceList<IMAccount>( ResourceManager::instance()->allResourcesOfType( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#IMAccount") ) );
}



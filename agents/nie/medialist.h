/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _MEDIALIST_H_
#define _MEDIALIST_H_

namespace Nepomuk {
        class MediaFileListEntry;
}

#include "informationelement.h"
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * A file containing a list of media files.e.g. a playlist 
 */
    class NEPOMUK_EXPORT MediaList : public InformationElement
    {
    public:
        /**
         * Create a new empty and invalid MediaList instance
         */
        MediaList();
        /**
         * Default copy constructor
         */
        MediaList( const MediaList& );
        MediaList( const Resource& );
        /**
         * Create a new MediaList instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        MediaList( const QString& uriOrIdentifier );
        /**
         * Create a new MediaList instance representing the resource
         * referenced by \a uri.
         */
        MediaList( const QUrl& uri );
        ~MediaList();

        MediaList& operator=( const MediaList& );

            /**
             * Get property 'MediaFileListEntry'. This property is intended 
             * to point to an RDF list of MediaFiles. 
             */
            QList<MediaFileListEntry> mediaFileListEntrys() const;

            /**
             * Set property 'MediaFileListEntry'. This property is intended 
             * to point to an RDF list of MediaFiles. 
             */
            void setMediaFileListEntrys( const QList<MediaFileListEntry>& value );

            /**
             * Add a value to property 'MediaFileListEntry'. This property 
             * is intended to point to an RDF list of MediaFiles. 
             */
            void addMediaFileListEntry( const MediaFileListEntry& value );

            /**
             * \return The URI of the property 'MediaFileListEntry'. 
             */
            static QUrl mediaFileListEntryUri();

            /**
             * Retrieve a list of all available MediaList resources. This 
             * list consists of all resource of type MediaList that are stored 
             * in the local Nepomuk meta data storage and any changes made locally. 
             * Be aware that in some cases this list can get very big. Then it 
             * might be better to use libKNep directly. 
             */
            static QList<MediaList> allMediaLists();


        /**
         * \return The URI of the resource type that is used in MediaList instances.
         */
        static QString resourceTypeUri();

    protected:
       MediaList( const QString& uri, const QUrl& type );
       MediaList( const QUrl& uri, const QUrl& type );
   };
}

#endif

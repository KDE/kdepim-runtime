/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _MAILBOXDATAOBJECT_H_
#define _MAILBOXDATAOBJECT_H_

namespace Nepomuk {
}

#include "dataobject.h"
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * An entity encountered in a mailbox. Most common interpretations 
 * for such an entity include Message or Folder 
 */
    class NEPOMUK_EXPORT MailboxDataObject : public DataObject
    {
    public:
        /**
         * Create a new empty and invalid MailboxDataObject instance
         */
        MailboxDataObject();
        /**
         * Default copy constructor
         */
        MailboxDataObject( const MailboxDataObject& );
        MailboxDataObject( const Resource& );
        /**
         * Create a new MailboxDataObject instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        MailboxDataObject( const QString& uriOrIdentifier );
        /**
         * Create a new MailboxDataObject instance representing the resource
         * referenced by \a uri.
         */
        MailboxDataObject( const QUrl& uri );
        ~MailboxDataObject();

        MailboxDataObject& operator=( const MailboxDataObject& );

            /**
             * Get property 'isRead'. A flag that states the fact that a MailboxDataObject 
             * has been read. 
             */
            QList<bool> isReads() const;

            /**
             * Set property 'isRead'. A flag that states the fact that a MailboxDataObject 
             * has been read. 
             */
            void setIsReads( const QList<bool>& value );

            /**
             * Add a value to property 'isRead'. A flag that states the fact 
             * that a MailboxDataObject has been read. 
             */
            void addIsRead( const bool& value );

            /**
             * \return The URI of the property 'isRead'. 
             */
            static QUrl isReadUri();

            /**
             * Retrieve a list of all available MailboxDataObject resources. 
             * This list consists of all resource of type MailboxDataObject 
             * that are stored in the local Nepomuk meta data storage and any 
             * changes made locally. Be aware that in some cases this list can 
             * get very big. Then it might be better to use libKNep directly. 
             */
            static QList<MailboxDataObject> allMailboxDataObjects();


        /**
         * \return The URI of the resource type that is used in MailboxDataObject instances.
         */
        static QString resourceTypeUri();

    protected:
       MailboxDataObject( const QString& uri, const QUrl& type );
       MailboxDataObject( const QUrl& uri, const QUrl& type );
   };
}

#endif

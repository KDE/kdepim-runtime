/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _FILEDATAOBJECT_H_
#define _FILEDATAOBJECT_H_

namespace Nepomuk {
        class Contact;
        class Resource;
        class FileHash;
}

#include "dataobject.h"
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * A resource containing a finite sequence of bytes with arbitrary 
 * information, that is available to a computer program and is 
 * usually based on some kind of durable storage. A file is durable 
 * in the sense that it remains available for programs to use after 
 * the current program has finished. 
 */
    class NEPOMUK_EXPORT FileDataObject : public DataObject
    {
    public:
        /**
         * Create a new empty and invalid FileDataObject instance
         */
        FileDataObject();
        /**
         * Default copy constructor
         */
        FileDataObject( const FileDataObject& );
        FileDataObject( const Resource& );
        /**
         * Create a new FileDataObject instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        FileDataObject( const QString& uriOrIdentifier );
        /**
         * Create a new FileDataObject instance representing the resource
         * referenced by \a uri.
         */
        FileDataObject( const QUrl& uri );
        ~FileDataObject();

        FileDataObject& operator=( const FileDataObject& );

            /**
             * Get property 'fileLastAccessed'. Time when the file was last 
             * accessed. 
             */
            QList<QDateTime> fileLastAccesseds() const;

            /**
             * Set property 'fileLastAccessed'. Time when the file was last 
             * accessed. 
             */
            void setFileLastAccesseds( const QList<QDateTime>& value );

            /**
             * Add a value to property 'fileLastAccessed'. Time when the file 
             * was last accessed. 
             */
            void addFileLastAccessed( const QDateTime& value );

            /**
             * \return The URI of the property 'fileLastAccessed'. 
             */
            static QUrl fileLastAccessedUri();

            /**
             * Get property 'fileCreated'. File creation date 
             */
            QList<QDateTime> fileCreateds() const;

            /**
             * Set property 'fileCreated'. File creation date 
             */
            void setFileCreateds( const QList<QDateTime>& value );

            /**
             * Add a value to property 'fileCreated'. File creation date 
             */
            void addFileCreated( const QDateTime& value );

            /**
             * \return The URI of the property 'fileCreated'. 
             */
            static QUrl fileCreatedUri();

            /**
             * Get property 'fileSize'. The size of the file in bytes. For compressed 
             * files it means the size of the packed file, not of the contents. 
             * For folders it means the aggregated size of all contained files 
             * and folders 
             */
            QList<qint64> fileSizes() const;

            /**
             * Set property 'fileSize'. The size of the file in bytes. For compressed 
             * files it means the size of the packed file, not of the contents. 
             * For folders it means the aggregated size of all contained files 
             * and folders 
             */
            void setFileSizes( const QList<qint64>& value );

            /**
             * Add a value to property 'fileSize'. The size of the file in bytes. 
             * For compressed files it means the size of the packed file, not 
             * of the contents. For folders it means the aggregated size of 
             * all contained files and folders 
             */
            void addFileSize( const qint64& value );

            /**
             * \return The URI of the property 'fileSize'. 
             */
            static QUrl fileSizeUri();

            /**
             * Get property 'permissions'. A string containing the permissions 
             * of a file. A feature common in many UNIX-like operating systems. 
             */
            QStringList permissionses() const;

            /**
             * Set property 'permissions'. A string containing the permissions 
             * of a file. A feature common in many UNIX-like operating systems. 
             */
            void setPermissionses( const QStringList& value );

            /**
             * Add a value to property 'permissions'. A string containing 
             * the permissions of a file. A feature common in many UNIX-like 
             * operating systems. 
             */
            void addPermissions( const QString& value );

            /**
             * \return The URI of the property 'permissions'. 
             */
            static QUrl permissionsUri();

            /**
             * Get property 'fileName'. Name of the file, together with the 
             * extension 
             */
            QStringList fileNames() const;

            /**
             * Set property 'fileName'. Name of the file, together with the 
             * extension 
             */
            void setFileNames( const QStringList& value );

            /**
             * Add a value to property 'fileName'. Name of the file, together 
             * with the extension 
             */
            void addFileName( const QString& value );

            /**
             * \return The URI of the property 'fileName'. 
             */
            static QUrl fileNameUri();

            /**
             * Get property 'fileUrl'. URL of the file. It points at the location 
             * of the file. In cases where creating a simple file:// or http:// 
             * URL for a file is difficult (e.g. for files inside compressed 
             * archives) the applications are encouraged to use conventions 
             * defined by Apache Commons VFS Project at http://jakarta.apache.org/ 
             * commons/ vfs/ filesystems.html. 
             */
            QList<Resource> fileUrls() const;

            /**
             * Set property 'fileUrl'. URL of the file. It points at the location 
             * of the file. In cases where creating a simple file:// or http:// 
             * URL for a file is difficult (e.g. for files inside compressed 
             * archives) the applications are encouraged to use conventions 
             * defined by Apache Commons VFS Project at http://jakarta.apache.org/ 
             * commons/ vfs/ filesystems.html. 
             */
            void setFileUrls( const QList<Resource>& value );

            /**
             * Add a value to property 'fileUrl'. URL of the file. It points 
             * at the location of the file. In cases where creating a simple 
             * file:// or http:// URL for a file is difficult (e.g. for files 
             * inside compressed archives) the applications are encouraged 
             * to use conventions defined by Apache Commons VFS Project at 
             * http://jakarta.apache.org/ commons/ vfs/ filesystems.html. 
             */
            void addFileUrl( const Resource& value );

            /**
             * \return The URI of the property 'fileUrl'. 
             */
            static QUrl fileUrlUri();

            /**
             * Get property 'Hash'. Links the file with it's hash value. 
             */
            QList<FileHash> hashs() const;

            /**
             * Set property 'Hash'. Links the file with it's hash value. 
             */
            void setHashs( const QList<FileHash>& value );

            /**
             * Add a value to property 'Hash'. Links the file with it's hash 
             * value. 
             */
            void addHash( const FileHash& value );

            /**
             * \return The URI of the property 'Hash'. 
             */
            static QUrl hashUri();

            /**
             * Get property 'fileOwner'. The owner of the file as defined by 
             * the file system access rights feature. 
             */
            QList<Contact> fileOwners() const;

            /**
             * Set property 'fileOwner'. The owner of the file as defined by 
             * the file system access rights feature. 
             */
            void setFileOwners( const QList<Contact>& value );

            /**
             * Add a value to property 'fileOwner'. The owner of the file as 
             * defined by the file system access rights feature. 
             */
            void addFileOwner( const Contact& value );

            /**
             * \return The URI of the property 'fileOwner'. 
             */
            static QUrl fileOwnerUri();

            /**
             * Get property 'fileLastModified'. last modification date 
             */
            QList<QDateTime> fileLastModifieds() const;

            /**
             * Set property 'fileLastModified'. last modification date 
             */
            void setFileLastModifieds( const QList<QDateTime>& value );

            /**
             * Add a value to property 'fileLastModified'. last modification 
             * date 
             */
            void addFileLastModified( const QDateTime& value );

            /**
             * \return The URI of the property 'fileLastModified'. 
             */
            static QUrl fileLastModifiedUri();

            /**
             * Retrieve a list of all available FileDataObject resources. 
             * This list consists of all resource of type FileDataObject that 
             * are stored in the local Nepomuk meta data storage and any changes 
             * made locally. Be aware that in some cases this list can get very 
             * big. Then it might be better to use libKNep directly. 
             */
            static QList<FileDataObject> allFileDataObjects();


        /**
         * \return The URI of the resource type that is used in FileDataObject instances.
         */
        static QString resourceTypeUri();

    protected:
       FileDataObject( const QString& uri, const QUrl& type );
       FileDataObject( const QUrl& uri, const QUrl& type );
   };
}

#endif

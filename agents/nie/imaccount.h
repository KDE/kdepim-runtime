/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _IMACCOUNT_H_
#define _IMACCOUNT_H_

namespace Nepomuk {
        class Role;
}

#include "contactmedium.h"
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * An account in an Instant Messaging system. 
 */
    class NEPOMUK_EXPORT IMAccount : public ContactMedium
    {
    public:
        /**
         * Create a new empty and invalid IMAccount instance
         */
        IMAccount();
        /**
         * Default copy constructor
         */
        IMAccount( const IMAccount& );
        IMAccount( const Resource& );
        /**
         * Create a new IMAccount instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        IMAccount( const QString& uriOrIdentifier );
        /**
         * Create a new IMAccount instance representing the resource
         * referenced by \a uri.
         */
        IMAccount( const QUrl& uri );
        ~IMAccount();

        IMAccount& operator=( const IMAccount& );

            /**
             * Get property 'imStatus'. Current status of the given IM account. 
             * Values for this property may include 'Online', 'Offline', 
             * 'Do not disturb' etc. The exact choice of them is unspecified. 
             */
            QString imStatus() const;

            /**
             * Set property 'imStatus'. Current status of the given IM account. 
             * Values for this property may include 'Online', 'Offline', 
             * 'Do not disturb' etc. The exact choice of them is unspecified. 
             */
            void setImStatus( const QString& value );

            /**
             * \return The URI of the property 'imStatus'. 
             */
            static QUrl imStatusUri();

            /**
             * Get property 'imNickname'. A nickname attached to a particular 
             * IM Account. 
             */
            QStringList imNicknames() const;

            /**
             * Set property 'imNickname'. A nickname attached to a particular 
             * IM Account. 
             */
            void setImNicknames( const QStringList& value );

            /**
             * Add a value to property 'imNickname'. A nickname attached to 
             * a particular IM Account. 
             */
            void addImNickname( const QString& value );

            /**
             * \return The URI of the property 'imNickname'. 
             */
            static QUrl imNicknameUri();

            /**
             * Get property 'imAccountType'. Type of the IM account. This 
             * may be the name of the service that provides the IM functionality. 
             * Examples might include Jabber, ICQ, MSN etc 
             */
            QStringList imAccountTypes() const;

            /**
             * Set property 'imAccountType'. Type of the IM account. This 
             * may be the name of the service that provides the IM functionality. 
             * Examples might include Jabber, ICQ, MSN etc 
             */
            void setImAccountTypes( const QStringList& value );

            /**
             * Add a value to property 'imAccountType'. Type of the IM account. 
             * This may be the name of the service that provides the IM functionality. 
             * Examples might include Jabber, ICQ, MSN etc 
             */
            void addImAccountType( const QString& value );

            /**
             * \return The URI of the property 'imAccountType'. 
             */
            static QUrl imAccountTypeUri();

            /**
             * Get property 'imStatusMessage'. A feature common in most IM 
             * systems. A message left by the user for all his/her contacts 
             * to see. 
             */
            QStringList imStatusMessages() const;

            /**
             * Set property 'imStatusMessage'. A feature common in most IM 
             * systems. A message left by the user for all his/her contacts 
             * to see. 
             */
            void setImStatusMessages( const QStringList& value );

            /**
             * Add a value to property 'imStatusMessage'. A feature common 
             * in most IM systems. A message left by the user for all his/her 
             * contacts to see. 
             */
            void addImStatusMessage( const QString& value );

            /**
             * \return The URI of the property 'imStatusMessage'. 
             */
            static QUrl imStatusMessageUri();

            /**
             * Get property 'imID'. Identifier of the IM account. Examples 
             * of such identifier might include ICQ UINs, Jabber IDs, Skype 
             * names etc. 
             */
            QStringList imIDs() const;

            /**
             * Set property 'imID'. Identifier of the IM account. Examples 
             * of such identifier might include ICQ UINs, Jabber IDs, Skype 
             * names etc. 
             */
            void setImIDs( const QStringList& value );

            /**
             * Add a value to property 'imID'. Identifier of the IM account. 
             * Examples of such identifier might include ICQ UINs, Jabber 
             * IDs, Skype names etc. 
             */
            void addImID( const QString& value );

            /**
             * \return The URI of the property 'imID'. 
             */
            static QUrl imIDUri();

            /**
             * Get all resources that have this resource set as property 'IMAccount'. 
             * Indicates that an Instant Messaging account owned by an entity 
             * represented by this contact. \sa ResourceManager::allResourcesWithProperty 
             */
            QList<Role> iMAccountOf() const;

            /**
             * Retrieve a list of all available IMAccount resources. This 
             * list consists of all resource of type IMAccount that are stored 
             * in the local Nepomuk meta data storage and any changes made locally. 
             * Be aware that in some cases this list can get very big. Then it 
             * might be better to use libKNep directly. 
             */
            static QList<IMAccount> allIMAccounts();


        /**
         * \return The URI of the resource type that is used in IMAccount instances.
         */
        static QString resourceTypeUri();

    protected:
       IMAccount( const QString& uri, const QUrl& type );
       IMAccount( const QUrl& uri, const QUrl& type );
   };
}

#endif

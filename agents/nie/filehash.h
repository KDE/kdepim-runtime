/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _FILEHASH_H_
#define _FILEHASH_H_

namespace Nepomuk {
        class FileDataObject;
}

#include <nepomuk/resource.h>
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * A fingerprint of the file, generated by some hashing function. 
 */
    class NEPOMUK_EXPORT FileHash : public Resource
    {
    public:
        /**
         * Create a new empty and invalid FileHash instance
         */
        FileHash();
        /**
         * Default copy constructor
         */
        FileHash( const FileHash& );
        FileHash( const Resource& );
        /**
         * Create a new FileHash instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        FileHash( const QString& uriOrIdentifier );
        /**
         * Create a new FileHash instance representing the resource
         * referenced by \a uri.
         */
        FileHash( const QUrl& uri );
        ~FileHash();

        FileHash& operator=( const FileHash& );

            /**
             * Get property 'hValue'. The actual value of the hash. 
             */
            QStringList hValues() const;

            /**
             * Set property 'hValue'. The actual value of the hash. 
             */
            void setHValues( const QStringList& value );

            /**
             * Add a value to property 'hValue'. The actual value of the hash. 
             */
            void addHValue( const QString& value );

            /**
             * \return The URI of the property 'hValue'. 
             */
            static QUrl hValueUri();

            /**
             * Get property 'hAlgorithm'. Name of the algorithm used to compute 
             * the hash value. Examples might include CRC32, MD5, SHA, TTH 
             * etc. 
             */
            QStringList hAlgorithms() const;

            /**
             * Set property 'hAlgorithm'. Name of the algorithm used to compute 
             * the hash value. Examples might include CRC32, MD5, SHA, TTH 
             * etc. 
             */
            void setHAlgorithms( const QStringList& value );

            /**
             * Add a value to property 'hAlgorithm'. Name of the algorithm 
             * used to compute the hash value. Examples might include CRC32, 
             * MD5, SHA, TTH etc. 
             */
            void addHAlgorithm( const QString& value );

            /**
             * \return The URI of the property 'hAlgorithm'. 
             */
            static QUrl hAlgorithmUri();

            /**
             * Get all resources that have this resource set as property 'Hash'. 
             * Links the file with it's hash value. \sa ResourceManager::allResourcesWithProperty 
             */
            QList<FileDataObject> hashOf() const;

            /**
             * Retrieve a list of all available FileHash resources. This list 
             * consists of all resource of type FileHash that are stored in 
             * the local Nepomuk meta data storage and any changes made locally. 
             * Be aware that in some cases this list can get very big. Then it 
             * might be better to use libKNep directly. 
             */
            static QList<FileHash> allFileHashs();


        /**
         * \return The URI of the resource type that is used in FileHash instances.
         */
        static QString resourceTypeUri();

    protected:
       FileHash( const QString& uri, const QUrl& type );
       FileHash( const QUrl& uri, const QUrl& type );
   };
}

#endif

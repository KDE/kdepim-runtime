/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk/tools.h>
#include <nepomuk/variant.h>
#include <nepomuk/resourcemanager.h>
#include "message.h"

#include "messageheader.h"
#include "attachment.h"
#include "contact.h"
#include "message.h"
Nepomuk::Message::Message()
  : InformationElement( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Message") )
{
}


Nepomuk::Message::Message( const Message& res )
  : InformationElement( res )
{
}


Nepomuk::Message::Message( const Nepomuk::Resource& res )
  : InformationElement( res )
{
}


Nepomuk::Message::Message( const QString& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Message") )
{
}

Nepomuk::Message::Message( const QUrl& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Message") )
{
}

Nepomuk::Message::Message( const QString& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}

Nepomuk::Message::Message( const QUrl& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}

Nepomuk::Message::~Message()
{
}


Nepomuk::Message& Nepomuk::Message::operator=( const Message& res )
{
    Resource::operator=( res );
    return *this;
}


QString Nepomuk::Message::resourceTypeUri()
{
    return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Message";
}

QList<Nepomuk::Contact> Nepomuk::Message::replyTos() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Contact>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#replyTo") ).toResourceList() );
}

void Nepomuk::Message::setReplyTos( const QList<Nepomuk::Contact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Contact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#replyTo"), Variant( l ) );
}

void Nepomuk::Message::addReplyTo( const Nepomuk::Contact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#replyTo") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#replyTo"), v );
}

QUrl Nepomuk::Message::replyToUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#replyTo");
}

QString Nepomuk::Message::messageSubject() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageSubject") ).toStringList() << QString() ).first();
}

void Nepomuk::Message::setMessageSubject( const QString& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageSubject"), Variant( value ) );
}

QUrl Nepomuk::Message::messageSubjectUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageSubject");
}

QList<Nepomuk::Message> Nepomuk::Message::referenceses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Message>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#references") ).toResourceList() );
}

void Nepomuk::Message::setReferenceses( const QList<Nepomuk::Message>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Message>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#references"), Variant( l ) );
}

void Nepomuk::Message::addReferences( const Nepomuk::Message& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#references") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#references"), v );
}

QUrl Nepomuk::Message::referencesUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#references");
}

QList<Nepomuk::Contact> Nepomuk::Message::recipients() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Contact>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#recipient") ).toResourceList() );
}

void Nepomuk::Message::setRecipients( const QList<Nepomuk::Contact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Contact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#recipient"), Variant( l ) );
}

void Nepomuk::Message::addRecipient( const Nepomuk::Contact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#recipient") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#recipient"), v );
}

QUrl Nepomuk::Message::recipientUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#recipient");
}

QList<Nepomuk::Contact> Nepomuk::Message::secondaryRecipients() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Contact>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#secondaryRecipient") ).toResourceList() );
}

void Nepomuk::Message::setSecondaryRecipients( const QList<Nepomuk::Contact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Contact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#secondaryRecipient"), Variant( l ) );
}

void Nepomuk::Message::addSecondaryRecipient( const Nepomuk::Contact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#secondaryRecipient") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#secondaryRecipient"), v );
}

QUrl Nepomuk::Message::secondaryRecipientUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#secondaryRecipient");
}

QList<Nepomuk::Contact> Nepomuk::Message::froms() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Contact>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#from") ).toResourceList() );
}

void Nepomuk::Message::setFroms( const QList<Nepomuk::Contact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Contact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#from"), Variant( l ) );
}

void Nepomuk::Message::addFrom( const Nepomuk::Contact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#from") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#from"), v );
}

QUrl Nepomuk::Message::fromUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#from");
}

QStringList Nepomuk::Message::plainTextMessageContents() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#plainTextMessageContent") ).toStringList());
}

void Nepomuk::Message::setPlainTextMessageContents( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#plainTextMessageContent"), Variant( value ) );
}

void Nepomuk::Message::addPlainTextMessageContent( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#plainTextMessageContent") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#plainTextMessageContent"), v );
}

QUrl Nepomuk::Message::plainTextMessageContentUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#plainTextMessageContent");
}

QStringList Nepomuk::Message::htmlMessageContents() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#htmlMessageContent") ).toStringList());
}

void Nepomuk::Message::setHtmlMessageContents( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#htmlMessageContent"), Variant( value ) );
}

void Nepomuk::Message::addHtmlMessageContent( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#htmlMessageContent") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#htmlMessageContent"), v );
}

QUrl Nepomuk::Message::htmlMessageContentUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#htmlMessageContent");
}

Nepomuk::MessageHeader Nepomuk::Message::messageHeader() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return MessageHeader( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageHeader") ).toResource().uri() );
}

void Nepomuk::Message::setMessageHeader( const Nepomuk::MessageHeader& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageHeader"), Variant( value ) );
}

QUrl Nepomuk::Message::messageHeaderUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageHeader");
}

QList<Nepomuk::Contact> Nepomuk::Message::primaryRecipients() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Contact>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#primaryRecipient") ).toResourceList() );
}

void Nepomuk::Message::setPrimaryRecipients( const QList<Nepomuk::Contact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Contact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#primaryRecipient"), Variant( l ) );
}

void Nepomuk::Message::addPrimaryRecipient( const Nepomuk::Contact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#primaryRecipient") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#primaryRecipient"), v );
}

QUrl Nepomuk::Message::primaryRecipientUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#primaryRecipient");
}

QList<Nepomuk::Message> Nepomuk::Message::inReplyTos() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Message>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#inReplyTo") ).toResourceList() );
}

void Nepomuk::Message::setInReplyTos( const QList<Nepomuk::Message>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Message>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#inReplyTo"), Variant( l ) );
}

void Nepomuk::Message::addInReplyTo( const Nepomuk::Message& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#inReplyTo") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#inReplyTo"), v );
}

QUrl Nepomuk::Message::inReplyToUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#inReplyTo");
}

QDateTime Nepomuk::Message::sentDate() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sentDate") ).toDateTimeList() << QDateTime() ).first();
}

void Nepomuk::Message::setSentDate( const QDateTime& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sentDate"), Variant( value ) );
}

QUrl Nepomuk::Message::sentDateUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sentDate");
}

QList<Nepomuk::Contact> Nepomuk::Message::senders() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Contact>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sender") ).toResourceList() );
}

void Nepomuk::Message::setSenders( const QList<Nepomuk::Contact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Contact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sender"), Variant( l ) );
}

void Nepomuk::Message::addSender( const Nepomuk::Contact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sender") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sender"), v );
}

QUrl Nepomuk::Message::senderUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sender");
}

QStringList Nepomuk::Message::messageIds() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageId") ).toStringList());
}

void Nepomuk::Message::setMessageIds( const QStringList& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageId"), Variant( value ) );
}

void Nepomuk::Message::addMessageId( const QString& value )
{
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageId") );
    v.append( value );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageId"), v );
}

QUrl Nepomuk::Message::messageIdUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageId");
}

QList<Nepomuk::Attachment> Nepomuk::Message::attachments() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<Attachment>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#hasAttachment") ).toResourceList() );
}

void Nepomuk::Message::setAttachments( const QList<Nepomuk::Attachment>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Attachment>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#hasAttachment"), Variant( l ) );
}

void Nepomuk::Message::addAttachment( const Nepomuk::Attachment& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#hasAttachment") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#hasAttachment"), v );
}

QUrl Nepomuk::Message::attachmentUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#hasAttachment");
}

QDateTime Nepomuk::Message::receivedDate() const
{
    return ( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#receivedDate") ).toDateTimeList() << QDateTime() ).first();
}

void Nepomuk::Message::setReceivedDate( const QDateTime& value )
{
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#receivedDate"), Variant( value ) );
}

QUrl Nepomuk::Message::receivedDateUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#receivedDate");
}

QList<Nepomuk::Message> Nepomuk::Message::inReplyToOf() const
{
    return convertResourceList<Message>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#inReplyTo"), *this ) );
}

QList<Nepomuk::Message> Nepomuk::Message::referencesOf() const
{
    return convertResourceList<Message>( ResourceManager::instance()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#references"), *this ) );
}

QList<Nepomuk::Message> Nepomuk::Message::allMessages()
{
    return Nepomuk::convertResourceList<Message>( ResourceManager::instance()->allResourcesOfType( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Message") ) );
}



/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _SOURCECODE_H_
#define _SOURCECODE_H_

namespace Nepomuk {
}

#include "plaintextdocument.h"
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * Code in a compilable or interpreted programming language. 
 */
    class NEPOMUK_EXPORT SourceCode : public PlainTextDocument
    {
    public:
        /**
         * Create a new empty and invalid SourceCode instance
         */
        SourceCode();
        /**
         * Default copy constructor
         */
        SourceCode( const SourceCode& );
        SourceCode( const Resource& );
        /**
         * Create a new SourceCode instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        SourceCode( const QString& uriOrIdentifier );
        /**
         * Create a new SourceCode instance representing the resource
         * referenced by \a uri.
         */
        SourceCode( const QUrl& uri );
        ~SourceCode();

        SourceCode& operator=( const SourceCode& );

            /**
             * Get property 'commentCharacterCount'. The amount of character 
             * in comments i.e. characters ignored by the compiler/interpreter. 
             */
            QList<qint64> commentCharacterCounts() const;

            /**
             * Set property 'commentCharacterCount'. The amount of character 
             * in comments i.e. characters ignored by the compiler/interpreter. 
             */
            void setCommentCharacterCounts( const QList<qint64>& value );

            /**
             * Add a value to property 'commentCharacterCount'. The amount 
             * of character in comments i.e. characters ignored by the compiler/interpreter. 
             */
            void addCommentCharacterCount( const qint64& value );

            /**
             * \return The URI of the property 'commentCharacterCount'. 
             */
            static QUrl commentCharacterCountUri();

            /**
             * Get property 'programmingLanguage'. Indicates the name of 
             * the programming language this source code file is written in. 
             * Examples might include 'C', 'C++', 'Java' etc. 
             */
            QStringList programmingLanguages() const;

            /**
             * Set property 'programmingLanguage'. Indicates the name of 
             * the programming language this source code file is written in. 
             * Examples might include 'C', 'C++', 'Java' etc. 
             */
            void setProgrammingLanguages( const QStringList& value );

            /**
             * Add a value to property 'programmingLanguage'. Indicates 
             * the name of the programming language this source code file is 
             * written in. Examples might include 'C', 'C++', 'Java' etc. 
             */
            void addProgrammingLanguage( const QString& value );

            /**
             * \return The URI of the property 'programmingLanguage'. 
             */
            static QUrl programmingLanguageUri();

            /**
             * Get property 'definesClass'. Name of a class defined in the 
             * source code file. 
             */
            QStringList definesClasses() const;

            /**
             * Set property 'definesClass'. Name of a class defined in the 
             * source code file. 
             */
            void setDefinesClasses( const QStringList& value );

            /**
             * Add a value to property 'definesClass'. Name of a class defined 
             * in the source code file. 
             */
            void addDefinesClass( const QString& value );

            /**
             * \return The URI of the property 'definesClass'. 
             */
            static QUrl definesClassUri();

            /**
             * Get property 'definesFunction'. A name of a function/method 
             * defined in the given source code file. 
             */
            QStringList definesFunctions() const;

            /**
             * Set property 'definesFunction'. A name of a function/method 
             * defined in the given source code file. 
             */
            void setDefinesFunctions( const QStringList& value );

            /**
             * Add a value to property 'definesFunction'. A name of a function/method 
             * defined in the given source code file. 
             */
            void addDefinesFunction( const QString& value );

            /**
             * \return The URI of the property 'definesFunction'. 
             */
            static QUrl definesFunctionUri();

            /**
             * Get property 'definesGlobalVariable'. Name of a global variable 
             * defined within the source code file. 
             */
            QStringList definesGlobalVariables() const;

            /**
             * Set property 'definesGlobalVariable'. Name of a global variable 
             * defined within the source code file. 
             */
            void setDefinesGlobalVariables( const QStringList& value );

            /**
             * Add a value to property 'definesGlobalVariable'. Name of a 
             * global variable defined within the source code file. 
             */
            void addDefinesGlobalVariable( const QString& value );

            /**
             * \return The URI of the property 'definesGlobalVariable'. 
             */
            static QUrl definesGlobalVariableUri();

            /**
             * Retrieve a list of all available SourceCode resources. This 
             * list consists of all resource of type SourceCode that are stored 
             * in the local Nepomuk meta data storage and any changes made locally. 
             * Be aware that in some cases this list can get very big. Then it 
             * might be better to use libKNep directly. 
             */
            static QList<SourceCode> allSourceCodes();


        /**
         * \return The URI of the resource type that is used in SourceCode instances.
         */
        static QString resourceTypeUri();

    protected:
       SourceCode( const QString& uri, const QUrl& type );
       SourceCode( const QUrl& uri, const QUrl& type );
   };
}

#endif

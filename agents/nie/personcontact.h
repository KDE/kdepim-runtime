/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _PERSONCONTACT_H_
#define _PERSONCONTACT_H_

namespace Nepomuk {
        class Affiliation;
        class Gender;
}

#include "contact.h"
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * A Contact that denotes a Person. A person can have multiple Affiliations. 
 */
    class NEPOMUK_EXPORT PersonContact : public Contact
    {
    public:
        /**
         * Create a new empty and invalid PersonContact instance
         */
        PersonContact();
        /**
         * Default copy constructor
         */
        PersonContact( const PersonContact& );
        PersonContact( const Resource& );
        /**
         * Create a new PersonContact instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        PersonContact( const QString& uriOrIdentifier );
        /**
         * Create a new PersonContact instance representing the resource
         * referenced by \a uri.
         */
        PersonContact( const QUrl& uri );
        ~PersonContact();

        PersonContact& operator=( const PersonContact& );

            /**
             * Get property 'hobby'. A hobby associated with a PersonContact. 
             * This property can be used to express hobbies and interests. 
             */
            QStringList hobbys() const;

            /**
             * Set property 'hobby'. A hobby associated with a PersonContact. 
             * This property can be used to express hobbies and interests. 
             */
            void setHobbys( const QStringList& value );

            /**
             * Add a value to property 'hobby'. A hobby associated with a PersonContact. 
             * This property can be used to express hobbies and interests. 
             */
            void addHobby( const QString& value );

            /**
             * \return The URI of the property 'hobby'. 
             */
            static QUrl hobbyUri();

            /**
             * Get property 'gender'. Gender of the given contact. 
             */
            Gender gender() const;

            /**
             * Set property 'gender'. Gender of the given contact. 
             */
            void setGender( const Gender& value );

            /**
             * \return The URI of the property 'gender'. 
             */
            static QUrl genderUri();

            /**
             * Get property 'nameGiven'. The given name for the object represented 
             * by this Contact. See documentation for 'nameFamily' property 
             * for details. 
             */
            QStringList nameGivens() const;

            /**
             * Set property 'nameGiven'. The given name for the object represented 
             * by this Contact. See documentation for 'nameFamily' property 
             * for details. 
             */
            void setNameGivens( const QStringList& value );

            /**
             * Add a value to property 'nameGiven'. The given name for the object 
             * represented by this Contact. See documentation for 'nameFamily' 
             * property for details. 
             */
            void addNameGiven( const QString& value );

            /**
             * \return The URI of the property 'nameGiven'. 
             */
            static QUrl nameGivenUri();

            /**
             * Get property 'Affiliation'. Links a PersonContact with an 
             * Affiliation. 
             */
            QList<Affiliation> affiliations() const;

            /**
             * Set property 'Affiliation'. Links a PersonContact with an 
             * Affiliation. 
             */
            void setAffiliations( const QList<Affiliation>& value );

            /**
             * Add a value to property 'Affiliation'. Links a PersonContact 
             * with an Affiliation. 
             */
            void addAffiliation( const Affiliation& value );

            /**
             * \return The URI of the property 'Affiliation'. 
             */
            static QUrl affiliationUri();

            /**
             * Get property 'nameFamily'. The family name of an Object represented 
             * by this Contact. These applies to people that have more than 
             * one given name. The 'first' one is considered 'the' given name 
             * (see nameGiven) property. All additional ones are considered 
             * 'additional' names. The name inherited from parents is the 
             * 'family name'. e.g. For Dr. John Phil Paul Stevenson Jr. M.D. 
             * A.C.P. we have contact with: honorificPrefix: 'Dr.', nameGiven: 
             * 'John', nameAdditional: 'Phil', nameAdditional: 'Paul', 
             * nameFamily: 'Stevenson', honorificSuffix: 'Jr.', honorificSuffix: 
             * 'M.D.', honorificSuffix: 'A.C.P.'. These properties form 
             * an equivalent of the compound 'N' property as defined in RFC 
             * 2426 Sec. 3.1.2 
             */
            QStringList nameFamilys() const;

            /**
             * Set property 'nameFamily'. The family name of an Object represented 
             * by this Contact. These applies to people that have more than 
             * one given name. The 'first' one is considered 'the' given name 
             * (see nameGiven) property. All additional ones are considered 
             * 'additional' names. The name inherited from parents is the 
             * 'family name'. e.g. For Dr. John Phil Paul Stevenson Jr. M.D. 
             * A.C.P. we have contact with: honorificPrefix: 'Dr.', nameGiven: 
             * 'John', nameAdditional: 'Phil', nameAdditional: 'Paul', 
             * nameFamily: 'Stevenson', honorificSuffix: 'Jr.', honorificSuffix: 
             * 'M.D.', honorificSuffix: 'A.C.P.'. These properties form 
             * an equivalent of the compound 'N' property as defined in RFC 
             * 2426 Sec. 3.1.2 
             */
            void setNameFamilys( const QStringList& value );

            /**
             * Add a value to property 'nameFamily'. The family name of an Object 
             * represented by this Contact. These applies to people that have 
             * more than one given name. The 'first' one is considered 'the' 
             * given name (see nameGiven) property. All additional ones are 
             * considered 'additional' names. The name inherited from parents 
             * is the 'family name'. e.g. For Dr. John Phil Paul Stevenson Jr. 
             * M.D. A.C.P. we have contact with: honorificPrefix: 'Dr.', 
             * nameGiven: 'John', nameAdditional: 'Phil', nameAdditional: 
             * 'Paul', nameFamily: 'Stevenson', honorificSuffix: 'Jr.', 
             * honorificSuffix: 'M.D.', honorificSuffix: 'A.C.P.'. These 
             * properties form an equivalent of the compound 'N' property 
             * as defined in RFC 2426 Sec. 3.1.2 
             */
            void addNameFamily( const QString& value );

            /**
             * \return The URI of the property 'nameFamily'. 
             */
            static QUrl nameFamilyUri();

            /**
             * Get property 'nameHonorificPrefix'. A prefix for the name 
             * of the object represented by this Contact. See documentation 
             * for the 'nameFamily' property for details. 
             */
            QStringList nameHonorificPrefixs() const;

            /**
             * Set property 'nameHonorificPrefix'. A prefix for the name 
             * of the object represented by this Contact. See documentation 
             * for the 'nameFamily' property for details. 
             */
            void setNameHonorificPrefixs( const QStringList& value );

            /**
             * Add a value to property 'nameHonorificPrefix'. A prefix for 
             * the name of the object represented by this Contact. See documentation 
             * for the 'nameFamily' property for details. 
             */
            void addNameHonorificPrefix( const QString& value );

            /**
             * \return The URI of the property 'nameHonorificPrefix'. 
             */
            static QUrl nameHonorificPrefixUri();

            /**
             * Get property 'nameAdditional'. Additional given name of an 
             * object represented by this contact. See documentation for 
             * 'nameFamily' property for details. 
             */
            QStringList nameAdditionals() const;

            /**
             * Set property 'nameAdditional'. Additional given name of an 
             * object represented by this contact. See documentation for 
             * 'nameFamily' property for details. 
             */
            void setNameAdditionals( const QStringList& value );

            /**
             * Add a value to property 'nameAdditional'. Additional given 
             * name of an object represented by this contact. See documentation 
             * for 'nameFamily' property for details. 
             */
            void addNameAdditional( const QString& value );

            /**
             * \return The URI of the property 'nameAdditional'. 
             */
            static QUrl nameAdditionalUri();

            /**
             * Get property 'nameHonorificSuffix'. A suffix for the name 
             * of the Object represented by the given object. See documentation 
             * for the 'nameFamily' for details. 
             */
            QStringList nameHonorificSuffixs() const;

            /**
             * Set property 'nameHonorificSuffix'. A suffix for the name 
             * of the Object represented by the given object. See documentation 
             * for the 'nameFamily' for details. 
             */
            void setNameHonorificSuffixs( const QStringList& value );

            /**
             * Add a value to property 'nameHonorificSuffix'. A suffix for 
             * the name of the Object represented by the given object. See documentation 
             * for the 'nameFamily' for details. 
             */
            void addNameHonorificSuffix( const QString& value );

            /**
             * \return The URI of the property 'nameHonorificSuffix'. 
             */
            static QUrl nameHonorificSuffixUri();

            /**
             * Retrieve a list of all available PersonContact resources. 
             * This list consists of all resource of type PersonContact that 
             * are stored in the local Nepomuk meta data storage and any changes 
             * made locally. Be aware that in some cases this list can get very 
             * big. Then it might be better to use libKNep directly. 
             */
            static QList<PersonContact> allPersonContacts();


        /**
         * \return The URI of the resource type that is used in PersonContact instances.
         */
        static QString resourceTypeUri();

    protected:
       PersonContact( const QString& uri, const QUrl& type );
       PersonContact( const QUrl& uri, const QUrl& type );
   };
}

#endif

/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _MESSAGE_H_
#define _MESSAGE_H_

namespace Nepomuk {
        class MessageHeader;
        class Attachment;
        class Contact;
        class Message;
}

#include "informationelement.h"
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * A message. Could be an email, instant messanging message, SMS 
 * message etc. 
 */
    class NEPOMUK_EXPORT Message : public InformationElement
    {
    public:
        /**
         * Create a new empty and invalid Message instance
         */
        Message();
        /**
         * Default copy constructor
         */
        Message( const Message& );
        Message( const Resource& );
        /**
         * Create a new Message instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Message( const QString& uriOrIdentifier );
        /**
         * Create a new Message instance representing the resource
         * referenced by \a uri.
         */
        Message( const QUrl& uri );
        ~Message();

        Message& operator=( const Message& );

            /**
             * Get property 'replyTo'. An address where the reply should be 
             * sent. 
             */
            QList<Contact> replyTos() const;

            /**
             * Set property 'replyTo'. An address where the reply should be 
             * sent. 
             */
            void setReplyTos( const QList<Contact>& value );

            /**
             * Add a value to property 'replyTo'. An address where the reply 
             * should be sent. 
             */
            void addReplyTo( const Contact& value );

            /**
             * \return The URI of the property 'replyTo'. 
             */
            static QUrl replyToUri();

            /**
             * Get property 'messageSubject'. The subject of a message 
             */
            QString messageSubject() const;

            /**
             * Set property 'messageSubject'. The subject of a message 
             */
            void setMessageSubject( const QString& value );

            /**
             * \return The URI of the property 'messageSubject'. 
             */
            static QUrl messageSubjectUri();

            /**
             * Get property 'references'. Signifies that a message references 
             * another message. This property is a generic one. See RFC 2822 
             * Sec. 3.6.4 
             */
            QList<Message> referenceses() const;

            /**
             * Set property 'references'. Signifies that a message references 
             * another message. This property is a generic one. See RFC 2822 
             * Sec. 3.6.4 
             */
            void setReferenceses( const QList<Message>& value );

            /**
             * Add a value to property 'references'. Signifies that a message 
             * references another message. This property is a generic one. 
             * See RFC 2822 Sec. 3.6.4 
             */
            void addReferences( const Message& value );

            /**
             * \return The URI of the property 'references'. 
             */
            static QUrl referencesUri();

            /**
             * Get property 'recipient'. A common superproperty for all properties 
             * that link a message with its recipients. Please don't use this 
             * property directly. 
             */
            QList<Contact> recipients() const;

            /**
             * Set property 'recipient'. A common superproperty for all properties 
             * that link a message with its recipients. Please don't use this 
             * property directly. 
             */
            void setRecipients( const QList<Contact>& value );

            /**
             * Add a value to property 'recipient'. A common superproperty 
             * for all properties that link a message with its recipients. 
             * Please don't use this property directly. 
             */
            void addRecipient( const Contact& value );

            /**
             * \return The URI of the property 'recipient'. 
             */
            static QUrl recipientUri();

            /**
             * Get property 'secondaryRecipient'. A superproperty for all 
             * "additional" recipients of a message. 
             */
            QList<Contact> secondaryRecipients() const;

            /**
             * Set property 'secondaryRecipient'. A superproperty for all 
             * "additional" recipients of a message. 
             */
            void setSecondaryRecipients( const QList<Contact>& value );

            /**
             * Add a value to property 'secondaryRecipient'. A superproperty 
             * for all "additional" recipients of a message. 
             */
            void addSecondaryRecipient( const Contact& value );

            /**
             * \return The URI of the property 'secondaryRecipient'. 
             */
            static QUrl secondaryRecipientUri();

            /**
             * Get property 'from'. The sender of the message 
             */
            QList<Contact> froms() const;

            /**
             * Set property 'from'. The sender of the message 
             */
            void setFroms( const QList<Contact>& value );

            /**
             * Add a value to property 'from'. The sender of the message 
             */
            void addFrom( const Contact& value );

            /**
             * \return The URI of the property 'from'. 
             */
            static QUrl fromUri();

            /**
             * Get property 'plainTextMessageContent'. Plain text representation 
             * of the body of the message. For multipart messages, all parts 
             * are concatenated into the value of this property. Attachments, 
             * whose mimeTypes are different from text/plain or message/rfc822 
             * are considered separate DataObjects and are therefore not 
             * included in the value of this property. 
             */
            QStringList plainTextMessageContents() const;

            /**
             * Set property 'plainTextMessageContent'. Plain text representation 
             * of the body of the message. For multipart messages, all parts 
             * are concatenated into the value of this property. Attachments, 
             * whose mimeTypes are different from text/plain or message/rfc822 
             * are considered separate DataObjects and are therefore not 
             * included in the value of this property. 
             */
            void setPlainTextMessageContents( const QStringList& value );

            /**
             * Add a value to property 'plainTextMessageContent'. Plain 
             * text representation of the body of the message. For multipart 
             * messages, all parts are concatenated into the value of this 
             * property. Attachments, whose mimeTypes are different from 
             * text/plain or message/rfc822 are considered separate DataObjects 
             * and are therefore not included in the value of this property. 
             */
            void addPlainTextMessageContent( const QString& value );

            /**
             * \return The URI of the property 'plainTextMessageContent'. 
             */
            static QUrl plainTextMessageContentUri();

            /**
             * Get property 'htmlMessageContent'. HTML representation 
             * of the body of the message. For multipart messages, all parts 
             * are concatenated into the value of this property. Attachments, 
             * whose mimeTypes are different from text/plain or message/rfc822 
             * are considered separate DataObjects and are therefore not 
             * included in the value of this property. 
             */
            QStringList htmlMessageContents() const;

            /**
             * Set property 'htmlMessageContent'. HTML representation 
             * of the body of the message. For multipart messages, all parts 
             * are concatenated into the value of this property. Attachments, 
             * whose mimeTypes are different from text/plain or message/rfc822 
             * are considered separate DataObjects and are therefore not 
             * included in the value of this property. 
             */
            void setHtmlMessageContents( const QStringList& value );

            /**
             * Add a value to property 'htmlMessageContent'. HTML representation 
             * of the body of the message. For multipart messages, all parts 
             * are concatenated into the value of this property. Attachments, 
             * whose mimeTypes are different from text/plain or message/rfc822 
             * are considered separate DataObjects and are therefore not 
             * included in the value of this property. 
             */
            void addHtmlMessageContent( const QString& value );

            /**
             * \return The URI of the property 'htmlMessageContent'. 
             */
            static QUrl htmlMessageContentUri();

            /**
             * Get property 'messageHeader'. Links the message wiith an arbitrary 
             * message header. 
             */
            MessageHeader messageHeader() const;

            /**
             * Set property 'messageHeader'. Links the message wiith an arbitrary 
             * message header. 
             */
            void setMessageHeader( const MessageHeader& value );

            /**
             * \return The URI of the property 'messageHeader'. 
             */
            static QUrl messageHeaderUri();

            /**
             * Get property 'primaryRecipient'. The primary intended recipient 
             * of a message. 
             */
            QList<Contact> primaryRecipients() const;

            /**
             * Set property 'primaryRecipient'. The primary intended recipient 
             * of a message. 
             */
            void setPrimaryRecipients( const QList<Contact>& value );

            /**
             * Add a value to property 'primaryRecipient'. The primary intended 
             * recipient of a message. 
             */
            void addPrimaryRecipient( const Contact& value );

            /**
             * \return The URI of the property 'primaryRecipient'. 
             */
            static QUrl primaryRecipientUri();

            /**
             * Get property 'inReplyTo'. Signifies that a message is a reply 
             * to another message. This feature is commonly used to link messages 
             * into conversations. Note that it is more specific than nmo:references. 
             * See RFC 2822 sec. 3.6.4 
             */
            QList<Message> inReplyTos() const;

            /**
             * Set property 'inReplyTo'. Signifies that a message is a reply 
             * to another message. This feature is commonly used to link messages 
             * into conversations. Note that it is more specific than nmo:references. 
             * See RFC 2822 sec. 3.6.4 
             */
            void setInReplyTos( const QList<Message>& value );

            /**
             * Add a value to property 'inReplyTo'. Signifies that a message 
             * is a reply to another message. This feature is commonly used 
             * to link messages into conversations. Note that it is more specific 
             * than nmo:references. See RFC 2822 sec. 3.6.4 
             */
            void addInReplyTo( const Message& value );

            /**
             * \return The URI of the property 'inReplyTo'. 
             */
            static QUrl inReplyToUri();

            /**
             * Get property 'sentDate'. Date when this message was sent. 
             */
            QDateTime sentDate() const;

            /**
             * Set property 'sentDate'. Date when this message was sent. 
             */
            void setSentDate( const QDateTime& value );

            /**
             * \return The URI of the property 'sentDate'. 
             */
            static QUrl sentDateUri();

            /**
             * Get property 'sender'. The person or agent submitting the message 
             * to the network, if other from the one given with the nmo:from 
             * property. Defined in RFC 822 sec. 4.4.2 
             */
            QList<Contact> senders() const;

            /**
             * Set property 'sender'. The person or agent submitting the message 
             * to the network, if other from the one given with the nmo:from 
             * property. Defined in RFC 822 sec. 4.4.2 
             */
            void setSenders( const QList<Contact>& value );

            /**
             * Add a value to property 'sender'. The person or agent submitting 
             * the message to the network, if other from the one given with the 
             * nmo:from property. Defined in RFC 822 sec. 4.4.2 
             */
            void addSender( const Contact& value );

            /**
             * \return The URI of the property 'sender'. 
             */
            static QUrl senderUri();

            /**
             * Get property 'messageId'. An identifier of a message. This 
             * property has been inspired by the message-id property defined 
             * in RFC 2822, Sec. 3.6.4. It should be used for all kinds of identifiers 
             * used by various messaging applications to connect multiple 
             * messages into conversations. 
             */
            QStringList messageIds() const;

            /**
             * Set property 'messageId'. An identifier of a message. This 
             * property has been inspired by the message-id property defined 
             * in RFC 2822, Sec. 3.6.4. It should be used for all kinds of identifiers 
             * used by various messaging applications to connect multiple 
             * messages into conversations. 
             */
            void setMessageIds( const QStringList& value );

            /**
             * Add a value to property 'messageId'. An identifier of a message. 
             * This property has been inspired by the message-id property 
             * defined in RFC 2822, Sec. 3.6.4. It should be used for all kinds 
             * of identifiers used by various messaging applications to connect 
             * multiple messages into conversations. 
             */
            void addMessageId( const QString& value );

            /**
             * \return The URI of the property 'messageId'. 
             */
            static QUrl messageIdUri();

            /**
             * Get property 'Attachment'. Links a message with files that 
             * were sent as attachments. 
             */
            QList<Attachment> attachments() const;

            /**
             * Set property 'Attachment'. Links a message with files that 
             * were sent as attachments. 
             */
            void setAttachments( const QList<Attachment>& value );

            /**
             * Add a value to property 'Attachment'. Links a message with files 
             * that were sent as attachments. 
             */
            void addAttachment( const Attachment& value );

            /**
             * \return The URI of the property 'Attachment'. 
             */
            static QUrl attachmentUri();

            /**
             * Get property 'receivedDate'. Date when this message was received. 
             */
            QDateTime receivedDate() const;

            /**
             * Set property 'receivedDate'. Date when this message was received. 
             */
            void setReceivedDate( const QDateTime& value );

            /**
             * \return The URI of the property 'receivedDate'. 
             */
            static QUrl receivedDateUri();

            /**
             * Get all resources that have this resource set as property 'inReplyTo'. 
             * Signifies that a message is a reply to another message. This 
             * feature is commonly used to link messages into conversations. 
             * Note that it is more specific than nmo:references. See RFC 2822 
             * sec. 3.6.4 \sa ResourceManager::allResourcesWithProperty 
             */
            QList<Message> inReplyToOf() const;

            /**
             * Get all resources that have this resource set as property 'references'. 
             * Signifies that a message references another message. This 
             * property is a generic one. See RFC 2822 Sec. 3.6.4 \sa ResourceManager::allResourcesWithProperty 
             */
            QList<Message> referencesOf() const;

            /**
             * Retrieve a list of all available Message resources. This list 
             * consists of all resource of type Message that are stored in the 
             * local Nepomuk meta data storage and any changes made locally. 
             * Be aware that in some cases this list can get very big. Then it 
             * might be better to use libKNep directly. 
             */
            static QList<Message> allMessages();


        /**
         * \return The URI of the resource type that is used in Message instances.
         */
        static QString resourceTypeUri();

    protected:
       Message( const QString& uri, const QUrl& type );
       Message( const QUrl& uri, const QUrl& type );
   };
}

#endif

/*
 *
 * $Id: $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2007 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _DATACONTAINER_H_
#define _DATACONTAINER_H_

namespace Nepomuk {
        class DataObject;
}

#include "informationelement.h"
#include <nepomuk/nepomuk_export.h>

namespace Nepomuk {

/**
 * A superclass for all entities, whose primary purpose is to serve 
 * as containers for other data object. They usually don't have 
 * any "meaning" by themselves. Examples include folders, archives 
 * and optical disc images. 
 */
    class NEPOMUK_EXPORT DataContainer : public InformationElement
    {
    public:
        /**
         * Create a new empty and invalid DataContainer instance
         */
        DataContainer();
        /**
         * Default copy constructor
         */
        DataContainer( const DataContainer& );
        DataContainer( const Resource& );
        /**
         * Create a new DataContainer instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        DataContainer( const QString& uriOrIdentifier );
        /**
         * Create a new DataContainer instance representing the resource
         * referenced by \a uri.
         */
        DataContainer( const QUrl& uri );
        ~DataContainer();

        DataContainer& operator=( const DataContainer& );

            /**
             * Get all resources that have this resource set as property 'belongsToContainer'. 
             * Models the containment relations between Files and Folders 
             * (or CompressedFiles). \sa ResourceManager::allResourcesWithProperty 
             */
            QList<DataObject> belongsToContainerOf() const;

            /**
             * Retrieve a list of all available DataContainer resources. 
             * This list consists of all resource of type DataContainer that 
             * are stored in the local Nepomuk meta data storage and any changes 
             * made locally. Be aware that in some cases this list can get very 
             * big. Then it might be better to use libKNep directly. 
             */
            static QList<DataContainer> allDataContainers();


        /**
         * \return The URI of the resource type that is used in DataContainer instances.
         */
        static QString resourceTypeUri();

    protected:
       DataContainer( const QString& uri, const QUrl& type );
       DataContainer( const QUrl& uri, const QUrl& type );
   };
}

#endif

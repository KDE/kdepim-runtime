/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -m -p resourcewatchermanagerinterface /home/chrigi/devel/kde/kdepim-runtime/agents/nepomukfeeder/dms-copy/interfaces/org.kde.nepomuk.ResourceWatcher.xml
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef RESOURCEWATCHERMANAGERINTERFACE_H_1312387679
#define RESOURCEWATCHERMANAGERINTERFACE_H_1312387679

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.nepomuk.ResourceWatcher
 */
class OrgKdeNepomukResourceWatcherInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.nepomuk.ResourceWatcher"; }

public:
    OrgKdeNepomukResourceWatcherInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgKdeNepomukResourceWatcherInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> stopWatcher(const QString &objectName)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(objectName);
        return asyncCallWithArgumentList(QLatin1String("stopWatcher"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> watch(const QStringList &resources, const QStringList &properties, const QStringList &types)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(resources) << qVariantFromValue(properties) << qVariantFromValue(types);
        return asyncCallWithArgumentList(QLatin1String("watch"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace kde {
    namespace nepomuk {
      typedef ::OrgKdeNepomukResourceWatcherInterface ResourceWatcher;
    }
  }
}
#endif

How To Build This Template
-=-=-=-=-=-=-=-=-=-=-=-=-=

cd <project_name_path>
mkdir build
cd build
cmake -DCMAKE_INSTALL_PREFIX=$KDEDIR -DCMAKE_BUILD_TYPE=debugfull ..      <- do not forget the ..
make
make install or su -c 'make install'

where $KDEDIR needs to be set to your KDE installation prefix.

to uninstall the project:
make uninstall or su -c 'make uninstall'

Note: you can use another build path. Then cd in your build dir and:
export KDE_SRC=path_to_your_src
cmake $KDE_SRC -DCMAKE_INSTALL_PREFIX=$KDEDIR -DCMAKE_BUILD_TYPE=debugfull


Implementation hints
-=-=-=-=-=-=-=-=-=-=

The code generated by this template can be compiled without any further
changes, so you can start with your own code right away.

However, there are a couple of things you will need to change outside the
resource's code, i.e. in the resource's .desktop file:

- Name field: the name of the resource with which it will be displayed in
  system settings and applications which can add resources on their own.
  E.g. MyBackend Resource

- Comment field: short description of the resource, also used to be
  displayed, e.g. For calendars and contacts stored in MyBackend

- Icon field: if you are not writing a contact (addressbook) resource, you have
  to change this to either an icon for the respective MIME type you are going
  to provide or use a resource specific icon which you provide yourself

- X-Akonadi-MimeTypes field: if you are not writing a contact (addressbook)
  resource, you have to change this to either a known MIME type or one you
  install together with the resource.
  If your resource can provide data of more than one MIME type, you can
  specific all possible ones as a comma separate list.

  Common MIME types are:
  * text/directory: for contact data
  * text/calendar: for calendar data (there are Akonadi defined subtypes
    available, e.g. application/x-vnd.akonadi.calendar.event)
  * message/rfc822: for e-mails and usenet news

The template comes with an input file for KDE's KConfigXT framework
for improved configuration file handling. The generated class is called
"Settings", so access to its data is provided through its singleton
instance method Settings::self().
See http://techbase.kde.org/Development/Tutorials/Using_KConfig_XT

Documentation
-=-=-=-=-=-=-

The Akonadi-KDE API documentation can be found here:
http://api.kde.org/4.x-api/kdepimlibs-apidocs/akonadi/html/index.html

General developer information, e.g. tutorials can be found here:
http://techbase.kde.org/Projects/PIM/Akonadi

Project homepage is http://www.akonadi-project.org/

IRC: #akonadi on freenode network

----------------------------
Please send all comments to:
Kevin Krammer
kevin@akonadi-project.org

Last update: May 2008
